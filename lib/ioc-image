#!/bin/sh

__record () {
    local name=$2
    local action=$1

    if [ -z $action ] ; then
        echo "  ERROR: missing action or UUID"
        exit 1
    fi

    if [ -z $name ] ; then
        echo "  ERROR: missing action or UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local mountpoint="$(__get_jail_prop mountpoint $fulluuid)"
    local union_mount="$(mount -t unionfs | grep $fulluuid | wc -l)"

    if [ ! -d ${mountpoint}/recorded ] ; then
        mkdir ${mountpoint}/recorded
    fi


    if [ $action == "start" ] ; then
        echo "* Recording to: ${mountpoint}/recorded"

        if [ $union_mount -lt 1 ] ; then
            mount -t unionfs -o noatime,copymode=transparent \
            ${mountpoint}/recorded/ ${mountpoint}/root
        fi

    elif [ $action == "stop" ] ; then
        umount -ft unionfs $iocroot/jails/${fulluuid}/root > /dev/null 2>&1
        echo "* Stopped recording to: ${mountpoint}/recorded"

        find ${mountpoint}/recorded/ -type d -empty -exec rm -rf {} \; \
        > /dev/null 2>&1
        find ${mountpoint}/recorded/ -type f -size 0 -exec rm -f {} \; \
        > /dev/null 2>&1
        find ${mountpoint}/recorded/ -name "utx.*" -exec rm -f {} \; \
        > /dev/null 2>&1
        find ${mountpoint}/recorded/ -name .history -exec rm -f {} \; \
        > /dev/null 2>&1
    fi
}

__package () {
    # create package from recorded changes
    # sha256 too
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local mountpoint="$(__get_jail_prop mountpoint $fulluuid)"

    if [ ! -d ${mountpoint}/recorded ] ; then
        echo "  ERROR: nothing to package, missing recorded directory!"
        echo "  HINT: have you recorded the jail?"
        exit 1
    fi

    if [ ! -d "$iocroot/packages" ] ; then
        mkdir $iocroot/packages
    fi

    echo "* Creating package..."
    tar -cvJf $iocroot/packages/$fulluuid.tar.xz -C ${mountpoint}/recorded . && \
    sha256 -q $iocroot/packages/$fulluuid.tar.xz > $iocroot/packages/$fulluuid.sha256
    echo "* Package saved to: $iocroot/packages/$fulluuid.tar.xz"
    echo "* Checksum created: $iocroot/packages/$fulluuid.sha256"
}

__import () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing package UUID"
        exit 1
    fi

    local package="$(find $iocroot/packages/ -name $name\*.tar.xz)"
    local image="$(find $iocroot/images/ -name $name\*.tar.xz)"
    local pcount="$(echo $package|wc -w)"
    local icount="$(echo $image|wc -w)"

    if [ $pcount -gt 1 ] ; then
        echo "  ERROR: multiple matching packages, please narrow down UUID."
        exit 1
    elif [ $pcount -eq 1 ] ; then
        local pcksum="$(find $iocroot/packages/ -name $name\*.sha256)"
    fi

    if [ $icount -gt 1 ] ; then
        echo "  ERROR: multiple matching images, please narrow down UUID."
        exit 1
    elif [ $icount -eq 1 ] ; then
        local icksum="$(find $iocroot/images/ -name $name\*.sha256)"
    fi

    if [ $pcount -gt 0 ] && [ $icount -gt 0 ] ; then
        echo "  ERROR: same UUID is matching both a package and an image."
        exit 1
    fi

    if [ $pcount -gt 0 ] ; then
        echo "* Found package $package"
        echo "* Importing package $package"

        if [ ! -f $pcksum ] ; then
            echo "  ERROR: missing checksum file!"
            exit 1
        fi

        local new_cksum="$(sha256 -q $package)"
        local old_cksum="$(cat $pcksum)"
        local uuid="$(__create_jail create | grep uuid | cut -f2 -d=)"
        local mountpoint="$(__get_jail_prop mountpoint $uuid)"

        if [ $new_cksum != $old_cksum ] ; then
            echo "  ERROR: checksum mismatch ..exiting"
            exit 1
        else
            tar -xvJf $package -C $mountpoint/root
        fi

    elif [ $icount -gt 0 ] ; then
        echo "* Found image $image"
        echo "* Importing image $image"

        if [ ! -f $icksum ] ; then
            echo "  ERROR: missing checksum file!"
            exit 1
        fi

        local new_cksum="$(sha256 -q $image)"
        local old_cksum="$(cat $icksum)"
        local uuid="$(__create_jail create -e|tail -1)"
        local mountpoint="$(__get_jail_prop mountpoint $uuid)"

        if [ $new_cksum != $old_cksum ] ; then
            echo "  ERROR: checksum mismatch ..exiting"
            exit 1
        else
            tar -xvJf $image -C $mountpoint/root
        fi

    else
        echo "  ERROR: package or image $name not found!"
        exit 1
    fi

    cat $iocroot/jails/${uuid}/root/etc/rc.conf | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/$uuid/g" \
    > $iocroot/jails/${uuid}/rc.conf

    mv $iocroot/jails/${uuid}/rc.conf \
    $iocroot/jails/${uuid}/root/etc/rc.conf
}

__export () {
    # Export full jail
    # sha256
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local jail_path="$(__get_jail_prop mountpoint $fulluuid)"
    local state=$(jls|grep ${jail_path} | wc -l)

    if [ "$state" -gt "0" ] ; then
        echo "  ERROR: $fulluuid is running!"
        echo "  Stop jail before exporting!"
        exit 1
    fi

    local mountpoint="$(__get_jail_prop mountpoint $fulluuid)"

    if [ ! -d "$iocroot/images" ] ; then
        mkdir $iocroot/images
    fi

    echo "* Exporting $fulluuid .."
    tar -cvJf $iocroot/images/$fulluuid.tar.xz -C ${mountpoint}/root . && \
    sha256 -q $iocroot/images/$fulluuid.tar.xz > $iocroot/images/$fulluuid.sha256
    echo "* Image saved to: $iocroot/images/$fulluuid.tar.xz"
    echo "* Checksum created: $iocroot/images/$fulluuid.sha256"

}
