#!/bin/sh

# activate pool for iocage
# intended for automation tool
__activate () {
    local _pool
    _pool="$1"

    if [ ! -z ${_pool} ] ; then
        zpool set comment=iocage ${_pool}
    else
        __find_mypool
        echo "pool: ${pool}"
    fi

    exit 0
}

__deactivate () {
    local _pool
    _pool="$1"

    if [ ! -z ${_pool} ] ; then
        zpool set comment=inherit ${_pool}
    fi

    exit 0
}

__clean () {
    local _answer

    # Look for the right switch and then ask the user if they are sure
    case "$1" in
        -a)
            echo " "
            echo "  WARNING: this will destroy $pool/iocage"
            echo " "
            echo "  Please make sure all jails are stopped before continuing."
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "$_answer" == "Y" -o "$_answer" == "y" ] ; then
                echo "  Destroying $pool/iocage"
                zfs destroy -rRf $pool/iocage
                rm -rf ${iocroot}
                exit 0
            else
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        ;;
        -r)
            echo " "
            echo "  WARNING: this will destroy all releases"
            echo " "
            echo "  Please make sure all basejails are stopped before continuing."
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "$_answer" == "Y" -o "$_answer" == "y" ] ; then
                echo "  Destroying $pool/iocage/base"
                zfs destroy -rRf $pool/iocage/base
                echo "  Destroying $pool/iocage/download"
                zfs destroy -rRf $pool/iocage/download
                echo "  Destroying $pool/iocage/releases"
                zfs destroy -rRf $pool/iocage/releases
                exit 0
            else
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        ;;
        -j)
            echo " "
            echo "  WARNING: this will destroy all jails"
            echo " "
            echo "  Please make sure all jails are stopped before continuing."
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "$_answer" == "Y" -o "$_answer" == "y" ] ; then
                echo "  Destroying $pool/iocage/jails"
                zfs destroy -rRf $pool/iocage/jails
                echo "  Cleaning TAGs at $pool/iocage/tags"
                rm -rf ${iocroot}/tags
                exit 0
            else
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        ;;
    esac
}

__reclone_basejail () {
    local _fulluuid _fs_list _dataset _jail_release _jailed_dataset \
          _jailed_dataset_check _migrate

    _fulluuid="$1"
    _dataset="$2"
    _jail_release="$(__get_jail_prop release ${_fulluuid} ${_dataset})"
    _fs_list="$(zfs list -t snap -rH -o name ${pool}/iocage/releases | \
             grep root@${_fulluuid})"
    _old_base_check="$(zfs list -Hr ${pool}/iocage/jails/${_fulluuid} | \
                     grep -v data | wc -l)"
    _jailed_dataset="${pool}/iocage/jails/${_fulluuid}/root/data"
    _jailed_dataset_check="$(zfs get -H creation ${_jailed_dataset} > \
                           /dev/null 2>&1 ; echo $?)"
    _base_inuse="$(zfs get -r -H -o value origin ${pool} | \
                 grep ${pool}/iocage/base)"
    _migrate=0

    # Check to see if the old ${pool}/iocage/base datasets are needed any longer
    if [ -z "${_base_inuse}" ] ; then
        zfs destroy -r ${pool}/iocage/base
    fi

    # Check to see if the user has the old style of jailed datasets
    if [ "${_jailed_dataset_check}" = "0" ] ; then
        zfs set jailed=off "${_jailed_dataset}"
        zfs rename -f "${_jailed_dataset}" \
                      "${pool}/iocage/jails/${_fulluuid}/data"
        zfs set jailed=on "${pool}/iocage/jails/${_fulluuid}/data"
    fi

    if [ "${_old_base_check}" -gt "15" ] ; then
        local _bfs_list="bin
                         boot
                         lib
                         libexec
                         rescue
                         sbin
                         usr"
        if [ -e "${iocroot}/jails/${_fulluuid}/root/usr/local" ] ; then
            mv    ${iocroot}/jails/${_fulluuid}/root/usr/local \
                  ${iocroot}/jails/${_fulluuid}/usr_local_old
        fi
        mv    ${iocroot}/jails/${_fulluuid}/root/etc \
              ${iocroot}/jails/${_fulluuid}/etc
        mv    ${iocroot}/jails/${_fulluuid}/root/root \
              ${iocroot}/jails/${_fulluuid}/root_home
        mv    ${iocroot}/jails/${_fulluuid}/root/usr/home \
              ${iocroot}/jails/${_fulluuid}/home
        mv    ${iocroot}/jails/${_fulluuid}/root/var \
              ${iocroot}/jails/${_fulluuid}/var_old
        zfs   umount -f ${pool}/iocage/jails/${_fulluuid}/root
        for _fs in ${_bfs_list} ; do
            zfs destroy -rf ${pool}/iocage/jails/${_fulluuid}/root/${_fs}
        done
        zfs   destroy ${pool}/iocage/jails/${_fulluuid}/root
        zfs   create -o compression=lz4 \
              -o mountpoint=none \
              ${pool}/iocage/jails/${_fulluuid}/usr
        zfs   create -u -o compression=lz4 -p \
              -o mountpoint=${iocroot}/jails/${_fulluuid}/root/usr/local \
              ${pool}/iocage/jails/${_fulluuid}/usr/local
        zfs   create -u -o compression=lz4 -p \
              -o mountpoint=${iocroot}/jails/${_fulluuid}/root/var \
              ${pool}/iocage/jails/${_fulluuid}/var
        export _migrate=1
    fi

    # Unmounts all the basejails datasets so the root can be recloned
    umount ${iocroot}/jails/${_fulluuid}/root/etc > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/root > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/usr/home > /dev/null 2>&1
    zfs umount ${pool}/iocage/jails/${_fulluuid}/var > /dev/null 2>&1
    zfs umount ${pool}/iocage/jails/${_fulluuid}/usr/local > /dev/null 2>&1
    zfs umount ${pool}/iocage/jails/${_fulluuid}/root/tmp > /dev/null 2>&1
    for _fs in ${_fs_list} ; do
        zfs destroy -rRf ${_fs}
    done
    zfs snapshot ${pool}/iocage/releases/${_jail_release}/root@${_fulluuid}

    echo "* ${_fulluuid} is a basejail, re-cloning jail.."
    # Recloning the root dataset and remounting the children
    zfs clone -o readonly=on \
        ${pool}/iocage/releases/${_jail_release}/root@${_fulluuid} \
        ${pool}/iocage/jails/${_fulluuid}/root
    mount -t unionfs -o noatime,copymode=transparent \
        ${iocroot}/jails/${_fulluuid}/etc \
        ${iocroot}/jails/${_fulluuid}/root/etc
    mount -t unionfs -o noatime,copymode=transparent \
        ${iocroot}/jails/${_fulluuid}/root_home \
        ${iocroot}/jails/${_fulluuid}/root/root
    mount -t unionfs -o noatime,copymode=transparent \
        ${iocroot}/jails/${_fulluuid}/home \
        ${iocroot}/jails/${_fulluuid}/root/usr/home
    mount -t tmpfs tmpfs ${iocroot}/jails/${_fulluuid}/root/tmp
    zfs mount ${pool}/iocage/jails/${_fulluuid}/var
    zfs mount ${pool}/iocage/jails/${_fulluuid}/usr/local
    if [ "${_migrate}" = "1" ] ; then
            mv    ${iocroot}/jails/${_fulluuid}/var_old/* \
                  ${iocroot}/jails/${_fulluuid}/root/var/
            rmdir ${iocroot}/jails/${_fulluuid}/var_old
        if [ -e "${iocroot}/jails/${_fulluuid}/usr_local_old" ] ; then
            mv    ${iocroot}/jails/${_fulluuid}/usr_local_old/* \
                  ${iocroot}/jails/${_fulluuid}/root/usr/local/
            rmdir ${iocroot}/jails/${_fulluuid}/usr_local_old
        fi
    fi
    etcupdate extract -D ${iocroot}/jails/${_fulluuid}/root \
        -s ${iocroot}/releases/${_jail_release}/root/usr/src
}

# This creates jails----------------------------------------------------
__create_jail () {
    local _installed _releases _zfsconfig _supported_release _configured \
          _zfsconfig

    _installed=$(zfs list -r ${pool}/iocage/releases|grep ${release})
    _releases=$(__list_jails -r|grep -v "Downloaded releases:")
    _supported_release=$(echo "${release}" | grep "RELEASE")
    _zfsconfig="$(__configure_jail generate)"
    _configured="0"

    if [ -z "${_supported_release}" -a "${2}" != "-e" ] ; then
        echo "  You are not running a production RELEASE."
        echo "  ERROR: Please specify release=RELEASE."
        exit 1
    fi

    if [ -z "${_installed}" -a -z "${_releases}" -a "${2}" != "-e" ] ; then
        __die "No RELEASEs found locally, run iocage fetch first."
    elif [ -z "${_installed}" -a "${2}" != "-e" ] ; then
        echo "  RELEASE ${release} not found locally."
        echo "  Please fetch ${release} or rerun iocage with release=RELEASE"
        echo ""
        echo "  These are the releases you have already fetched:"
        printf "${_releases}\n"
        exit 1
    fi

    if [ "${2}" = "-c" ] ; then
        export type=clonejail
        _fs_list=$(zfs list -rH -o name ${pool}/iocage/releases/${release})
        zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}
        for _fs in ${_fs_list} ; do
            _cfs=$(echo ${_fs} | sed s#/releases/${release}#/jails/${uuid}#g)
            eval "zfs clone ${_zfsconfig} \"${_fs}@${uuid}\" \"${_cfs}\""
        done
        # Hack to make sure type is set.
        __set_jail_prop type=clonejail ${uuid} ${pool}/iocage/jails/${uuid}
        _configured="1"
    elif [ "${2}" = "-e" ] ; then
        eval "zfs create -p ${_zfsconfig} \"${pool}/iocage/jails/${uuid}\""
        zfs create -p ${pool}/iocage/jails/${uuid}/root
        _configured="1"
    elif [ "$2" = "-t" ] ; then
        export type=thickjail
        eval "zfs create -p ${_zfsconfig} \"${pool}/iocage/jails/${uuid}\""
        _configured="1"
        # Hack to make sure type is set.
        __set_jail_prop type=thickjail ${uuid} ${pool}/iocage/jails/${uuid}
        zfs snapshot -r ${pool}/iocage/releases/${release}@${uuid}
        zfs send     -R ${pool}/iocage/releases/${release}/root@${uuid} | \
        zfs recv        ${pool}/iocage/jails/${uuid}/root
        zfs destroy  -r ${pool}/iocage/releases/${release}@${uuid}
        zfs destroy  -r ${pool}/iocage/jails/${uuid}/root@${uuid}
    else
        # Clones the root dataset from the RELEASE and makes sure to configure
        # the properties on it.
        _fs_list=$(zfs list -rH -o name ${pool}/iocage/releases/${release})
        zfs snapshot ${pool}/iocage/releases/${release}/root@${uuid}
        export type=basejail
        for _fs in ${_fs_list} ; do
            _cfs=$(echo ${_fs} | sed s#/releases/${release}#/jails/${uuid}#g)
            if [ "${_cfs}" = "${pool}/iocage/jails/${uuid}/root" ] ; then
                eval "zfs clone -o readonly=on\
                      ${_zfsconfig} \"${_fs}@${uuid}\" \"${_cfs}\""
            else
                eval "zfs create ${_zfsconfig} \"${pool}/iocage/jails/${uuid}\""
            fi
        done
        # Hack to make sure type is set.
        __set_jail_prop type=basejail ${uuid} ${pool}/iocage/jails/${uuid}
        # Create all the datasets a basejail needs r/w on, also makes unionfs
        # and tmpfs mounts for the jail.
        zfs    create -o compression=lz4 \
               -o mountpoint=none \
               ${pool}/iocage/jails/${uuid}/usr
        zfs    create -u -o compression=lz4 -p \
               -o mountpoint=${iocroot}/jails/${uuid}/root/usr/local \
               ${pool}/iocage/jails/${uuid}/usr/local
        zfs    create -u -o compression=lz4 -p \
               -o mountpoint=${iocroot}/jails/${uuid}/root/var \
               ${pool}/iocage/jails/${uuid}/var
        mkdir  ${iocroot}/jails/${uuid}/etc
        mount  -t unionfs -o noatime,copymode=transparent \
               ${iocroot}/jails/${uuid}/etc/ ${iocroot}/jails/${uuid}/root/etc
        mkdir  ${iocroot}/jails/${uuid}/home
        mkdir  ${iocroot}/jails/${uuid}/root_home
        _configured="1"
    fi

    # create tag link
    __link_tag ${pool}/iocage/jails/${uuid}

    # remove any residual clone snapshots carried over from the RELEASE datasets
    __snapremove ${uuid}@ALL ${pool}/iocage/jails/${uuid}

    # Make sure the jail isn't a empty jail
    if [ "${2}" = "-e" ] ; then
        echo ${uuid}
        exit 0
    fi

    touch ${iocroot}/jails/${uuid}/fstab

    # at create time set the default rc.conf
    echo "hostname=\"${hostname}\"" > \
        ${iocroot}/jails/${uuid}/root/etc/rc.conf
    __jail_rc_conf >> \
        ${iocroot}/jails/${uuid}/root/etc/rc.conf
    __resolv_conf ${uuid} ${pool}/iocage/jails/${uuid} > \
        ${iocroot}/jails/${uuid}/root/etc/resolv.conf
    zfs create -o compression=lz4 -o mountpoint=none -o jailed=on\
        ${pool}/${jail_zfs_dataset}

    # configure the jail mountpoint
    __hack88_mount ${uuid} ${pool}/iocage/jails/${uuid}

    # Install extra packages
    # this requires working resolv.conf in jail
    if [ "${pkglist}" != "none" ] ; then
        __pkg_install "${iocroot}/jails/${uuid}/root"
    fi
    if [ "$type" == "basejail" ] ; then
        umount ${iocroot}/jails/${uuid}/root/etc
    fi
    echo "  Successfully created: ${uuid} (${tag})"
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
    local _zfsconfig

    if [ -z $name ] ; then
        __die "missing UUID!"
    fi

    local dataset="$(__find_jail $name)" || exit $?

    local fs_list="$(zfs list -rH -o name $dataset)"
    _zfsconfig="$(__configure_jail generate)"

    if [ -z "$snapshot" ] ; then
        zfs snapshot -r ${dataset}@${uuid}
        for fs in $fs_list ; do
            cfs="$(echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g)"
            if [ $(echo $cfs | grep data$ | wc -l) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on $fs@$uuid $cfs
            else
                eval "zfs clone ${_zfsconfig} \"$fs@$uuid\" \"$cfs\""
            fi
        done
    else
        for fs in $fs_list ; do
            cfs="$(echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g)"
            if [ $(echo $cfs | grep data$ | wc -l) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on $fs@$snapshot $cfs
            else
                eval "zfs clone ${_zfsconfig} \"$fs@$snapshot\" \"$cfs\""
            fi
        done
    fi

    __link_tag ${pool}/iocage/jails/${uuid}

    #__configure_jail $pool/iocage/jails/$uuid
    mv $iocroot/jails/$uuid/fstab $iocroot/jails/$uuid/fstab.$name
    touch $iocroot/jails/$uuid/fstab

    cat $iocroot/jails/${uuid}/root/etc/rc.conf | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/$uuid/g" \
    > $iocroot/jails/${uuid}/rc.conf

    mv $iocroot/jails/${uuid}/rc.conf \
    $iocroot/jails/${uuid}/root/etc/rc.conf

    echo "  Successfully created: ${uuid} (${tag})"
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local _name _answer _uuid_list _force _dataset _origin \
          _fulluuid _jail_path _state _jail_release

    if [ -z "$1" ] ; then
        __die "missing UUID!"
    fi

    if [ "$1" == '-f' ] ; then
        _force="1"
        _name="$2"
    else
        _force="0"
        _name="$1"
    fi

    _fulluuid_dataset="$(__get_uuid_and_dataset $_name)" || exit $?

    set $_fulluuid_dataset
    _fulluuid="$1"
    _dataset="$2"

    if [ -z $_dataset ] ; then
        __die "$_name not found!"
    fi

    __check_children $_dataset

    _origin="$(zfs get -H -o value origin $_dataset)"
    _fulluuid="$(__check_name $_name)"
    _jail_path="$(__get_jail_prop mountpoint $_fulluuid $_dataset)"
    _state="$(__is_running $_fulluuid)"
    _jail_type="$(__get_jail_prop type $_fulluuid $_dataset)"
    _jail_release="$(__get_jail_prop release $_fulluuid $_dataset)"

    __check_children $_fulluuid $_dataset

    if [ ! -z $_state ] ; then
        __die "cannot destroy $_name - jail is running!"
    fi

    if [ "$_force" -ne "1" ] ; then
            echo " "
            echo "  WARNING: this will destroy jail $_fulluuid"
            echo "  Dataset: $_dataset"
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

        if [ "$_answer" == "Y" ] || [ "$_answer" == "y" ] ; then
            __destroy_func $_fulluuid $_dataset $_origin $_jail_type
        else
            __die "Command not confirmed.  No action taken."
        fi
    else
        __destroy_func $_fulluuid $_dataset $_origin $_jail_type
    fi
}

__destroy_func () {
    local _fulluuid _dataset _origin _jail_type

    _fulluuid="$1"
    _dataset="$2"
    _origin="$3"
    _jail_type="$4"

    echo "  Destroying: $_fulluuid"

    __unlink_tag $_dataset

    zfs destroy -fr $_dataset

    if [ "$_origin" != "-" ] ; then
        echo "  Destroying clone origin: $_origin"
        zfs destroy -r $_origin
    fi

    if [ $_jail_type == "basejail" ] ; then
        zfs destroy -fr $pool/iocage/base@$_fulluuid
    fi
}

# check if our datasets exist, if not create them
# fixes https://github.com/iocage/iocage/issues/80
__check_filesystems () {
    local _altroot _filesystems _missing

    _missing=0
    _altroot="$(zpool get -H altroot ${pool} | awk '{print $3}')"
    # Prepend iocage/ so we can properly set a mount on the root 'iocage'
    # dataset.
    _filesystems="iocage
                  iocage/.defaults
                  iocage/download
                  iocage/jails
                  iocage/releases"

    # Loop through and make sure the filesystems exist. Make sure you are root
    for _fs in $(echo ${_filesystems}) ; do
        zfs get -H creation ${pool}/${_fs} > /dev/null 2>&1
        if [ $? -ne 0 ] ; then
            _missing=1
            if [ "$(whoami)" != "root" ] ; then
                __die "Please run as root to create missing datasets."
            else
                echo "  INFO: Creating ${pool}/${_fs}"
                zfs create -p ${pool}/${_fs}
                zfs set mountpoint=/${_fs} ${pool}/${_fs}
                if [ ${_fs} == "iocage/.defaults" ] ; then
                    __reset_jail_props default  > /dev/null 2>&1
                    if [ $_altroot != "-" ] ; then
                        sed -i '' s#.*iocroot.*#iocroot="${_altroot}/iocage"# \
                            "${LIB}/ioc-globals"
                        export iocroot="${_altroot}/iocage"
                    elif [ $_altroot == "-" ] ; then
                        sed -i '' s#.*iocroot.*#iocroot="/iocage"# \
                            "${LIB}/ioc-globals"
                        export iocroot="/iocage"
                    fi
                fi
            fi
        fi
    done

    if [ ${_missing} -gt 0 ] ; then
        zfs mount -a
    fi

    export jail_datasets="$(zfs list -d1 -rH -o name ${pool}/iocage/jails \
                          | grep -E \
                          "^${pool}/iocage/jails/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}$")"

    # Checks to see if the user changed the altroot and modify ioc-globals
    # If the user decided to unset their altroot, they need to run again as
    # root to set it back to the default location
    if [ ${_altroot} != "-" -a "$(whoami)" == "root" ] ; then
        sed -i '' s#.*iocroot.*#iocroot="${_altroot}/iocage"# \
            "${LIB}/ioc-globals"
        export iocroot="${_altroot}/iocage"
    elif [ ${_altroot} != "-" -a "$(whoami)" != "root" -a ${iocroot} != "${_altroot}/iocage" ] ; then
        __error "You changed the altroot of ${pool}"
        echo "  Please run as root to fix."
        exit 1
    elif [ ${_altroot} == "-" -a "$(whoami)" == "root" ] ; then
        sed -i '' s#.*iocroot.*#iocroot="/iocage"# \
            "${LIB}/ioc-globals"
        export iocroot="/iocage"
    elif [ ${_altroot} == "-" -a "$(whoami)" != "root" -a ${iocroot} != "/iocage" ] ; then
        __error "You changed the altroot of ${pool}"
        echo "  Please run as root to fix."
        exit 1
    fi
}

__check_children () {
    local _dataset _jail_datasets _fs _origin _tag _fulluuid \
          _uuid

    _fulluuid="$1"
    _dataset="$2"
    _jail_datasets="$(__find_jail ALL)"

    for _fs in $_jail_datasets ; do
        _origin="$(zfs get -H -o value origin $_fs | cut -f1 -d@)"
        _tag="$(zfs get -H -o value org.freebsd.iocage:tag $_fs)"
        _uuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_fs)"

        if [ $_origin == "$_dataset" ] ; then
            __die "jail has dependent clone, uuid: $_uuid ($_tag)"
        fi
    done
}
