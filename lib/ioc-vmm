#!/bin/sh

# Create the bhyve guest
__create_vmm () {
	size="$2"
	guestuuid=$uuid
	diskid=$(echo $guestuuid | cut -d "-" -f1)
	tag=$(date "+%F@%T")

	if [ ! -e /iocage/disks ]; then
		echo "Creating /iocage/disks directory..."
		zfs create $pool/iocage/disks
		zfs set mountpoint="/iocage/disks" $pool/iocage/disks
	fi

	if [ -z $size ]; then
		echo "You must enter a disk size. Ex: iocage vmmcreate 8G"
	else
		echo "Creating bhyve guest..."
		echo "Guest UUID:" $guestuuid
		echo "Disk ID:" $diskid
		echo "Disk size:" $size
		zfs create $pool/iocage/jails/$guestuuid
		zfs create -V $size -o volmode=dev $pool/iocage/disks/$diskid.img
		# Set defaults here until __configure_vmm is created. 
		# iocage set and get will work just fine after guest is created. 
		zfs set org.freebsd.iocage:host_hostuuid=$guestuuid $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:tag=$tag $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:type=vmm $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:cpu=1 $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:ram=256M $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:diskid=$diskid $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:size=$size $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:con=nmdm0 $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:tap=tap0 $pool/iocage/jails/$guestuuid
		zfs set org.freebsd.iocage:loader=bhyveload $pool/iocage/jails/$guestuuid
	fi
}

# Load guest
__load() {
	local uuid="$1"
	local media="$2"
	local ram="$(zfs get -H -o value org.freebsd.iocage:ram $pool/iocage/jails/$uuid)"
	local con="$(zfs get -H -o value org.freebsd.iocage:con $pool/iocage/jails/$uuid)"
	local loader="$(zfs get -H -o value org.freebsd.iocage:loader $pool/iocage/jails/$uuid)"
	local install="$(zfs get -H -o value org.freebsd.iocage:install $pool/iocage/jails/$uuid)"
	local diskid="$(zfs get -H -o value org.freebsd.iocage:diskid $pool/iocage/jails/$uuid)"
	local pname=$(echo $uuid | cut -d "-" -f3-)

	if [ $loader = "grub-bhyve" ]; then
		if [ $install = "yes" ]; then
			printf '\(hd0\)\ /dev/zvol/'$pool'/iocage/disks/'$diskid'.img\n' > /iocage/jails/$uuid/device.map
			printf '\(cd0\)\ '$media'\n' >> /iocage/jails/$uuid/device.map
			grub-bhyve -m /iocage/jails/$uuid/device.map -r cd0 -c /dev/${con}A -M $ram ioc-$pname		
		elif [ $install = "no" ]; then
			printf '\(hd0\)\ /dev/zvol/'$pool'/iocage/disks/'$diskid'.img\n' > /iocage/jails/$uuid/device.map
                        printf '\(cd0\)\ '$media'\n' >> /iocage/jails/$uuid/device.map
                        grub-bhyve -m /iocage/jails/$uuid/device.map -r hd0,msdos1 -c /dev/${con}A -M $ram ioc-$pname
		fi
	else
		bhyveload -m $ram -d $media -c /dev/${con}A ioc-$pname
	fi
}

# Install guest (must pass full uuid for right now until other functions integrated)
__install_vmm() {
	local uuid="$2"
	local iso="$3"
	local ram="$(zfs get -H -o value org.freebsd.iocage:ram $pool/iocage/jails/$uuid)"
	local con="$(zfs get -H -o value org.freebsd.iocage:con $pool/iocage/jails/$uuid)"
	local cpu="$(zfs get -H -o value org.freebsd.iocage:cpu $pool/iocage/jails/$uuid)"
	local tap="$(zfs get -H -o value org.freebsd.iocage:tap $pool/iocage/jails/$uuid)"
	local diskid="$(zfs get -H -o value org.freebsd.iocage:diskid $pool/iocage/jails/$uuid)"
	local pname=$(echo $uuid | cut -d "-" -f3-)

	echo "Installing guest..."

	# Set install prop
	zfs set org.freebsd.iocage:install=yes $pool/iocage/jails/$uuid

	# Load from CD
	__load "$uuid" "/iocage/download/$iso"

	# Setup tap if needed
	if [ $tap != "tap0" ]; then
		# no need to create tap0, should be installed already via README
		# check to see if tap is already created before attempting to create new tap interface
		local tapif="$(ifconfig -a | grep $tap: | cut -c1-4)"
		if [ -z $tapif ]; then
			# create tap interface
			ifconfig $tap create
			ifconfig bridge0 addm $tap
		fi
	fi

	# Start the guest into ISO
	bhyve -c $cpu -A -H -P -m $ram -s0,hostbridge -s1,lpc \
	-s2,ahci-hd,/dev/zvol/$pool/iocage/disks/$diskid.img \
	-s3,ahci-cd,/iocage/download/$iso \
	-s4,virtio-net,$tap \
	-lcom1,/dev/${con}A ioc-$pname &

  	exit
}

# Start the guest
__start_vmm() {

local huuid="$2"
local ram="$(zfs get -H -o value org.freebsd.iocage:ram $pool/iocage/jails/$huuid)"
local con="$(zfs get -H -o value org.freebsd.iocage:con $pool/iocage/jails/$huuid)"
local cpu="$(zfs get -H -o value org.freebsd.iocage:cpu $pool/iocage/jails/$huuid)"
local tap="$(zfs get -H -o value org.freebsd.iocage:tap $pool/iocage/jails/$huuid)"
local diskid="$(zfs get -H -o value org.freebsd.iocage:diskid $pool/iocage/jails/$huuid)"
local pname=$(echo $huuid | cut -d "-" -f3-)

# Setup tap if needed
if [ $tap != "tap0" ]; then
	# no need to create tap0, should be installed already via README
	# check to see if tap is already created before attempting to create new tap interface
	local tapif="$(ifconfig -a | grep $tap: | cut -c1-4)"
	if [ -z $tapif ]; then
		# create tap interface
		ifconfig $tap create
		ifconfig bridge0 addm $tap
	fi
fi

# Subshell magic
local runstate="1"
	(
		while [ $runstate == "1" ]
		do	
			__load "$huuid" "/dev/zvol/$pool/iocage/disks/$diskid.img"
			bhyve -c $cpu -A -H -P -m $ram -s0,hostbridge -s1,lpc \
			-s2,ahci-hd,/dev/zvol/$pool/iocage/disks/$diskid.img \
			-s3,virtio-net,$tap \
			-lcom1,/dev/${con}A ioc-$pname &
			local vmpid=$!
			wait $vmpid
			vmrc=$?
			sleep 5
			if [ $vmrc == "1" ]; then
				# VM has been powered off
				runstate="0"
			else
			fi
		done
		bhyvectl --destroy --vm=ioc-$pname
	) &

}
