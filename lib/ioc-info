#!/bin/sh

# Print supported releases----------------------------------
__print_release () {
    supported="10.2-RELEASE
                9.3-RELEASE"

    echo "Supported releases are: "
    for rel in $(echo $supported) ; do
        printf "%15s\n" "$rel"
    done
}

# Print defaults set in this script.
__print_defaults () {
    local _prop _prop_name _saved_default

    _CONF="$CONF_NET
           $CONF_JAIL
           $CONF_RCTL
           $CONF_CUSTOM
           $CONF_ZFS
           $CONF_SYNC
           $CONF_FTP
           $CONF_GIT"

    for _prop in $(echo $_CONF)  ; do
        _prop_name=$_prop
        eval _prop="\$${_prop}"

        if [ ! -z "${_prop}" ] ; then
            _saved_default="$(__get_jail_prop ${_prop_name} default)"
            if [ "${_saved_default}" != "none" ] ; then
                echo "${_prop_name}=${_saved_default}"
            else
                echo "${_prop_name}=${_prop}"
            fi
        fi
    done
}

# Get default value for property if one is found
__get_default_prop () {
    local _property _value

    _property="$1"
    _value="$(__get_jail_prop $_property default)"

    if [ "$_value" != '-' ] ; then
        echo "$_value"
    else
        echo "none"
    fi
}

# Find and return the jail's top level ZFS dataset

__find_jail () {
    local _name _jlist _jail _tag _found
    _name="$1"

    if [ "${_name}" == "ALL" ] ; then
        for _jail in ${jail_datasets} ; do
            echo ${_jail}
        done
    elif [ "${_name}" == "default" ] ; then
        echo "${pool}/iocage/.defaults"
    else
        for _jail in ${jail_datasets} ; do
            _found="$(echo ${_jail} | grep -iE "^${pool}/iocage/jails/${_name}")"
            _tag="$(zfs get -H -o value org.freebsd.iocage:tag ${_jail})"

            if [ "${#_found}" -gt 0 ] ; then
                _jlist="${_jlist} ${_jail}"
            fi

            if [ "${_tag}" == "${_name}" ] ; then
                _jlist="${_jlist} ${_jail}"
            fi
        done

        if [ "$(echo ${_jlist}|wc -w)" -eq "1" ] ; then
            # remove whitespace
            echo "${_jlist}" | xargs
        elif [ "$(echo ${_jlist}|wc -w)" -gt "1" ] ; then
            __error "multiple jails matching name: $_name !"
            exit 1
        fi
    fi
}

__list_jails () {
    local jails=$(__find_jail ALL)
    local switch=$1
    local all_jids=$(jls -N -h jid | grep -v -x jid )
    local ioc_jids=""
    local non_ioc_jids=""

    if [ ! -z ${switch} ] && [ ${switch} == "--long" ] ; then
        __list_jails_long
        exit 0
    fi

    if [ ! -z ${switch} ] && [ $switch == "-r" ] ; then
        echo "Downloaded releases:"
        local releases="$(zfs list -o name -Hr $pool/iocage/releases \
                        | grep RELEASE$ | cut -d \/ -f 4)"
        for rel in $(echo $releases) ; do
            printf "%15s\n" "$rel"
        done
        exit 0
    fi

    printf "%-4s  %-36s  %s  %s  %s\n" "JID" "UUID"  "BOOT"\
           "STATE" "TAG"
    for jail in $jails ; do
        uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail)
        boot=$(zfs get -H -o value org.freebsd.iocage:boot $jail)
        tag=$(zfs get -H -o value org.freebsd.iocage:tag $jail)
        template=$(zfs get -H -o value org.freebsd.iocage:template $jail)
        # get jid for iocage jails
        jid=$(jls -j ioc-${uuid} jid 2> /dev/null)
        if [ -z "$jid"  ] ; then
            jid="-"
        fi
        local ioc_jids=$ioc_jids" "$jid

        if [ "$jid" == '-' ] ; then
            state=down
        else
            state=up
        fi

        if [ -z ${switch} ] ; then
            switch=zero
        fi

        if [ $switch == "-t" ] ; then
            if [ $template == "yes" ] ; then
                printf "%-4s  %-+.36s  %-3s   %-4s   %s\n" "$jid" "$uuid" \
                "$boot" "$state" "$tag"
            fi
        elif [ $switch == "-b" ] ; then
            jail_type="$(__get_jail_prop type $uuid)"
            if [ $jail_type == "basejail" ] ; then
                printf "%-4s  %-+.36s  %-3s   %-4s   %s\n" "$jid" "$uuid" \
                "$boot" "$state" "$tag"
            fi
        elif [ $switch != "-t" ] ; then
            if [ $template != "yes" ] ; then
                printf "%-4s  %-+.36s  %-4s  %-4s   %s\n" "$jid" "$uuid"  \
                "$boot" "$state" "$tag"
            fi
        fi
    done

    # create list of active jids not registered in iocage
    for all_jail in $all_jids ; do
        for ioc_jail in $ioc_jids ; do
            if [ "$all_jail" == "$ioc_jail" ] ; then
                local temp_loop_var=""
                break
            else
                local temp_loop_var=$all_jail

            fi
        done
    if [ -n "$temp_loop_var" ] ; then
        local non_ioc_jids=$non_ioc_jids" "$temp_loop_var
    fi
    done

    # output non iocage jails currently active
    if [ -n "$non_ioc_jids" ] ; then
        if [ $switch != "-t" ] ; then
            printf "%-+40s\n" "--- non iocage jails currently active ---"
            printf "%-4s  %-36s  %-15s  %s \n" "JID" "PATH"\
                  "IP4" "HOSTNAME"
            for jid in $non_ioc_jids ; do
                path=$(jls -j $jid  -h path | grep -v -x "path")
                ip4=$(jls -j $jid  -h ip4.addr | grep -v -x "ip4.addr")
                host_hostname=$(jls -j $jid  -h host.hostname | \
                                grep -v -x "host.hostname")
                printf "%-4s  %-36.36s  %-15s  %s\n" "$jid" "$path"  \
                        "$ip4" "$host_hostname"
            done
        fi
    fi
}

__list_jails_long () {
    local _jails _switch _ioc_jids _uuid _boot _tag _template _interfaces \
          _ip4_addr _ip6_addr _vnet _vnet0_mac \
          _vnet1_mac _vnet2_mac _vnet3_mac _type

    _jails=$(__find_jail ALL)
    _switch=$1
    _ioc_jids=""

    for _jail in $_jails ; do
        _uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_jail)
        _boot=$(zfs get -H -o value org.freebsd.iocage:boot $_jail)
        _tag=$(zfs get -H -o value org.freebsd.iocage:tag $_jail)
        _template=$(zfs get -H -o value org.freebsd.iocage:template $_jail)
        _interfaces=$(zfs get -H -o value org.freebsd.iocage:interfaces $_jail)
        _ip4_addr=$(zfs get -H -o value org.freebsd.iocage:ip4_addr $_jail)
        _ip6_addr=$(zfs get -H -o value org.freebsd.iocage:ip6_addr $_jail)
        _vnet=$(zfs get -H -o value org.freebsd.iocage:vnet $_jail)
        _vnet0_mac=$(zfs get -H -o value org.freebsd.iocage:vnet0_mac $_jail)
        _vnet1_mac=$(zfs get -H -o value org.freebsd.iocage:vnet1_mac $_jail)
        _vnet2_mac=$(zfs get -H -o value org.freebsd.iocage:vnet2_mac $_jail)
        _vnet3_mac=$(zfs get -H -o value org.freebsd.iocage:vnet3_mac $_jail)
        _type=$(zfs get -H -o value org.freebsd.iocage:type $_jail)

        # get jid for iocage jails
        _jid=$(jls -j ioc-${_uuid} jid 2> /dev/null)
        if [ -z "$_jid"  ] ; then
            _jid="-"
        fi

        _ioc_jids=$_ioc_jids" "$_jid

        if [ "$_jid" == '-' ] ; then
            _state=down
        else
            _state=up
        fi

        printf "%s\n" "JID: $_jid" "UUID: $_uuid" "BOOT: $_boot" \
                "STATE: $_state" "TAG: $_tag" "IPV4: $_ip4_addr"  \
                "IPV6: $_ip6_addr" "VNET: $_vnet" "TYPE: $_type"

        if [ $_vnet == "on" ] ; then
            printf "%s\n" "INTERFACES: $_interfaces"
        fi

        if [ $_vnet == "on" -a $_vnet0_mac != "none" ] ; then
            printf "%s\n" "VNET0_MAC: $_vnet0_mac"
        fi

        if [ $_vnet == "on" -a $_vnet1_mac != "none" ] ; then
            printf "%s\n" "VNET1_MAC: $_vnet1_mac"
        fi

        if [ $_vnet == "on" -a $_vnet2_mac != "none" ] ; then
            printf "%s\n" "VNET2_MAC: $_vnet2_mac"
        fi

        if [ $_vnet == "on" -a $_vnet3_mac != "none" ] ; then
            printf "%s\n" "VNET3_MAC: $_vnet3_mac"
        fi

    done
}

__print_disk () {
    local jails=$(__find_jail ALL)

    printf "%-36s  %-6s  %-5s  %-5s  %-5s  %-5s %-20s\n" \
           "UUID" "CRT" "RES" "QTA" "USE" "AVA" "TAG"

    for jail in $jails ; do
        uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail)
        crt=$(zfs get -H -o value compressratio $jail)
        res=$(zfs get -H -o value reservation $jail)
        qta=$(zfs get -H -o value quota $jail)
        use=$(zfs get -H -o value used $jail)
        ava=$(zfs get -H -o value available $jail)
        tag=$(zfs get -H -o value org.freebsd.iocage:tag $jail)

        printf "%-36s  %-6s  %-5s  %-5s  %-5s  %-5s %-20s\n" \
               "$uuid" "$crt" "$res" "$qta" "$use" "$ava" "$tag"
    done
}

__find_mypool () {
    local _comment _dupcheck

    pools="$(zpool list -H -o name)"
    _comment="$(zpool list -H -o name,comment | grep iocage)"
    _dupcheck="$(zpool list -H -o name,comment | grep iocage | wc -l)"
    found="0"

    if [ "$_dupcheck" -gt 1 ] ; then
        echo ""
        echo "  WARNING: You have more then one pool set for iocage use!"
        echo ""
        echo "**** POOLS ****"
        echo "$_comment"
        echo "***************"
        echo ""
        echo "  Please run 'iocage deactivate' on one of them"
        echo ""
        exit 1
    fi

    for i in $pools ; do
        mypool="$(zpool get -H comment $i | awk '{print $3}')"

        if [ "$mypool" == "iocage" ] ; then
            export pool=$i
            found=1
            break
        fi
    done

    if [ $found -ne 1 ] ; then
        if [ -n "$RC_PID" ]; then
            # RC_PID set means we are running from rc
            __error "No pool selected for iocage. Exiting"
            exit 1
        else
            echo "Setting up zpool [$i] for iocage usage..."
            echo "If you wish to change zpool, use 'iocage activate'"
            zpool set comment=iocage $i
            export pool=$i
        fi
    fi
}

# Get jail properties
# Expects: property as $1 and UUID|jail name as $2 optionally dataset as $3
__get_jail_prop () {
    local _value _found _name _property _dataset _CONF

    _name="$2"
    _property="$1"
    _found="0"
    _CONF="$CONF_NET
           $CONF_JAIL
           $CONF_RCTL
           $CONF_CUSTOM
           $CONF_SYNC
           $CONF_FTP
           $CONF_GIT"

    if [ "$3" ] ; then
        _dataset="$3"
    else
        _dataset="$(__find_jail $_name)"
    fi

    if [ -z $_dataset ] ; then
        __error "jail $_name not found!"
        exit 1
    fi

    if [ -z "$_property" ] ; then
        __error "Get failed, incorrect property syntax!"
        exit 1
    fi

    if [ -z "$_name" ] ; then
        __error "Missing UUID or property!"
        exit 1
    fi

    for prop in $_CONF ; do
        if [ $prop == $_property ] ; then
            _found=1
            _value="$(zfs get -H -o value org.freebsd.iocage:$prop \
                         $_dataset)"
            # Fix nonexistent property problem (zfs get returns "-")
            # info: https://github.com/iocage/iocage/issues/76
            if [ "$_value" == '-' ] ; then
                echo "none"
            else
                echo "$_value"
            fi
            break
        elif [ $_property == "all" ] ; then
            _found=1
            _value="$(zfs get -H -o value org.freebsd.iocage:$prop \
                         $_dataset)"
            echo "$prop:$_value"
        fi
    done

    for prop in $CONF_ZFS ; do
        if [ $prop == $_property ] ; then
            _found=1
            _value="$(zfs get -H -o value $prop $_dataset)"
            echo "$_value"
            break
        fi
    done

    if [ $_found -ne "1" ] ; then
        __error "Unsupported property: $_property !"
        exit 1
    fi
}

__runtime () {
    local name=$1

    if [ -z $name ] ; then
        __error "missing UUID!"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        __error "$name not found."
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        __error "multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local state="$(jls -n -j ioc-${fulluuid} | wc -l)"

    if [ "$state" -eq "1" ] ; then
        local params="$(jls -nj ioc-${fulluuid})"
        for i in $params ; do
            echo "  $i"
        done
    else
        __error "jail $fulluuid is not up."
        exit 1
    fi
}

__get_jail_name () {
    for i in $@; do
        :;
    done

    echo $i
}

# search for executable prestart|poststart|prestop|poststop in jail_dir first,
# else use jail exec_<type> property unchanged
__findscript () {
    local _fulluuid _dataset _type _jail_path
    _fulluuid="$1"
    # type should be one of prestart|poststart|prestop|poststop
    _type="$2"
    _dataset=$3
    _jail_path="$(__get_jail_prop mountpoint $_fulluuid $_dataset)"

    if [ -x "${_jail_path}/${_type}" ]; then
        echo "${_jail_path}/${_type}"
    else
        echo "$(__get_jail_prop exec_${_type} $_fulluuid $_dataset)"
    fi
}

# Expects name and optional dataset as $2
# translates names/tags to UUID
__check_name () {
    local name=$1
    local _dataset

    if [ -z $name ] ; then
        echo "ERROR"
        exit 1
    fi

    if [ $2 ] ; then
        _dataset="$2"
    else
        _dataset=$(__find_jail $name)
    fi

    local uuid="$(__get_jail_prop host_hostuuid $name $_dataset)"

    echo "$uuid"
}

# Expects full UUID
# Checks whether jail is up
__is_running () {
    local _fulluuid _state
    _fulluuid="$1"
    _state="$(jls -j ioc-${_fulluuid} jid 2> /dev/null)"

    if [ ! -z "${_state}" ] ; then
        echo 1
    fi
}

__get_uuid_and_dataset () {
    local _name _dataset _fulluuid

    _name="$1"

    if [ -z "$_name" ] ; then
        __error "missing jail UUID or name!"
        exit 1
    fi

    if [ "$2" ] ; then
        _dataset="$2"
    else
        _dataset=$(__find_jail $_name)
    fi

    if [ -z "$_dataset" ] ; then
        __error "$_name not found!"
        exit 1
    fi

    _fulluuid="$(__get_jail_prop host_hostuuid $_name $_dataset)"

    echo "$_fulluuid $_dataset"
}
