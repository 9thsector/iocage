#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2014 Peter Toth (pannon)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

unset LC_ALL
unset LANG

PATH=${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin

if [ "${1}" = "--version" -o "${1}" = "version" ] ; then
    echo "iocage 1.5.2 (2015/04/07)"
    exit 0
fi

# Check if the system has ZFS available. That is required for iocage to work properly.
# Exit if it doesn't.
if [ "$(zpool list)" = 'no pools available' ] ; then
    echo "  ERROR: ZFS is required for iocage to work and I can't find any pools available."
    exit 1
fi

. "lib/ioc-info"
. "lib/ioc-upgrade"
. "lib/ioc-help"

# Auto UUID
uuid=$(uuidgen)

# pkg list, only used with the create subcommand
pkglist="none"

# Network defaults for jails start here

# detect VNET kernel and adjust jail default
# if supported turn it on by default
if [ ! -z $(sysctl -qn kern.features.vimage) ] ; then
    vnet="on"
else
    vnet="off"
fi

ipv6="on"

interfaces="vnet0:bridge0,vnet1:bridge1"
host_hostname=$uuid
exec_fib=0
hostname=$uuid
ip4_addr="none"
ip4_saddrsel="1"
ip4="new"
ip6_addr="none"
ip6_saddrsel="1"
ip6="new"
defaultrouter="none"
defaultrouter6="none"

# Standard jail properties
devfs_ruleset="4"
exec_start="/bin/sh /etc/rc"
exec_stop="/bin/sh /etc/rc.shutdown"
exec_prestart="/usr/bin/true"
exec_poststart="/usr/bin/true"
exec_prestop="/usr/bin/true"
exec_poststop="/usr/bin/true"
exec_clean=1
exec_timeout=60
stop_timeout=30
exec_jail_user=root
exec_system_jail_user=0
exec_system_user=root
mount_devfs=1
mount_fdescfs=1
enforce_statfs="2"
children_max="0"
login_flags='-f root'
securelevel="2"
host_hostuuid=$uuid
allow_set_hostname=1
allow_sysvipc=0
allow_raw_sockets=0
allow_chflags=0
allow_mount=0
allow_mount_devfs=0
allow_mount_nullfs=0
allow_mount_procfs=0
allow_mount_tmpfs=0
allow_mount_zfs=0
allow_quotas=0
allow_socket_af=0

# RCTL limits
cpuset="off"
rlimits="off"
memoryuse="8G:log"
memorylocked="off"
vmemoryuse="off"
maxproc="off"
cputime="off"
pcpu="off"
datasize="off"
stacksize="off"
coredumpsize="off"
openfiles="off"
pseudoterminals="off"
swapuse="off"
nthr="off"
msgqqueued="off"
msgqsize="off"
nmsgq="off"
nsemop="off"
nshm="off"
shmsize="off"
wallclock="off"

# Custom properties
iocroot="/iocage"
tag=$(date "+%F@%T")
template="no"
boot="off"
notes="none"
owner="root"
priority="99"
last_started="none"
type="jail"
release=$(uname -r|cut -f 1,2 -d'-')
hostid=$(cat /etc/hostid)
jail_zfs="off"
jail_zfs_dataset="iocage/jails/${uuid}/root/data"
mount_procfs="0"

# Native ZFS properties
compression="lz4"
origin="readonly"
quota="none"
mountpoint="readonly"
compressratio="readonly"
available="readonly"
used="readonly"
dedup="off"
reservation="none"

# Sync properties
sync_state="none"
sync_target="none"
sync_tgt_zpool="none"

# FTP variables
ftphost="ftp.freebsd.org"
ftpfiles="base.txz doc.txz lib32.txz src.txz"

# Resource limits
CONF_RCTL="memoryuse
           memorylocked
           vmemoryuse
           maxproc
           cputime
           pcpu
           datasize
           stacksize
           coredumpsize
           openfiles
           pseudoterminals
           swapuse
           nthr
           msgqqueued
           msgqsize
           nmsgq
           nsemop
           nshm
           shmsize
           wallclock"

# Networking configuration
CONF_NET="interfaces
          vnet
          host_hostname
          hostname
          ip4_addr
          ip4_saddrsel
          ip4
          ip6_addr
          ip6_saddrsel
          ip6
          defaultrouter
          defaultrouter6
          exec_fib"

# Native jail properties
CONF_JAIL="devfs_ruleset
           mount_devfs
           exec_start
           exec_stop
           exec_prestart
           exec_prestop
           exec_poststop
           exec_poststart
           exec_clean
           exec_timeout
           stop_timeout
           exec_jail_user
           exec_system_jail_user
           exec_system_user
           mount_fdescfs
           mount_procfs
           enforce_statfs
           children_max
           login_flags
           securelevel
           allow_set_hostname
           allow_sysvipc
           allow_raw_sockets
           allow_chflags
           allow_mount
           allow_mount_devfs
           allow_mount_nullfs
           allow_mount_procfs
           allow_mount_tmpfs
           allow_mount_zfs
           allow_quotas
           allow_socket_af
           host_hostuuid"

# Custom properties
CONF_CUSTOM="tag
             template
             rlimits
             boot
             notes
             owner
             priority
             last_started
             type
             hostid
             cpuset
             jail_zfs
             jail_zfs_dataset
             release"

# Native ZFS properties
CONF_ZFS="compression
          origin
          quota
          mountpoint
          compressratio
          available
          used
          dedup
          reservation"

# ZFS sync (not used yet)
CONF_SYNC="sync_stat
           sync_target
           sync_tgt_zpool"

# ftp properties
CONF_FTP="ftphost ftpdir"

# Basejail filesystems
bfs_list="bin
          boot
          lib
          libexec
          rescue
          sbin
          usr/bin
          usr/include
          usr/lib
          usr/libexec
          usr/sbin
          usr/share
          usr/src
          usr/libdata
          usr/lib32"

# Basejail directories
bdir_list="dev
           tmp
           var
           etc
           root
           proc
           mnt"


# Process command line options-------------------------
__parse_cmd () {
    while [ $# -gt 0 ] ; do
        case "$1" in
            list)       __list_jails "$2"
                        exit
                ;;
            console)    __console "$2"
                        exit
                ;;
            exec)       shift
                        __exec "$@"
                        exit
                ;;
            chroot)     __chroot "$2" "$3"
                        exit
                ;;
            defaults)   __print_defaults
                        exit
                ;;
            create)     __export_props "$@"
                        __create_jail "$@"
                        exit
                ;;
            destroy)    __destroy_jail "$2"
                        exit
                ;;
            clone)      __export_props "$@"
                        __clone_jail "$2"
                        exit
                ;;
            fetch)      __export_props "$@"
                        __fetch_release
                        exit
                ;;
            get)        __get_jail_prop "$2" "$3"
                        exit
                ;;
            set)        __export_props "$@"
                        __set_jail_prop "$2" "$3"
                        exit
                ;;
            start)      __start_jail "$2"
                        exit
                ;;
            stop)       __stop_jail "$2"
                        exit
                ;;
            restart)    __restart_jail "$2"
                        exit
                ;;
            rcboot)     __rc_jails boot
                        exit
                ;;
            rcshutdown) __rc_jails shutdown
                        exit
                ;;
            df)         __print_disk
                        exit
                ;;
            snapshot)   __snapshot "$2"
                        exit
                ;;
            snaplist)   __snaplist "$2"
                        exit
                ;;
            snapremove) __snapremove "$2"
                        exit
                ;;
            promote)    __promote "$2"
                        exit
                ;;
            rollback)   __rollback "$2"
                        exit
                ;;
            uncap)      __rctl_uncap "$2"
                        exit
                ;;
            cap)        __rctl_limits "$2"
                        exit
                ;;
            limits)     __rctl_list "$2"
                        exit
                ;;
            inuse)      __rctl_used "$2"
                        exit
                ;;
            runtime)    __runtime "$2"
                        exit
                ;;
            update)     __update "$2"
                        exit
                ;;
            upgrade)     __upgrade "$2"
                        exit
                ;;
            record)     __record "$2" "$3"
                        exit
                ;;
            package)    __package "$2"
                        exit
                ;;
            export)     __export "$2"
                        exit
                ;;
            import)     __export_props "$@"
                        __import "$2"
                        exit
                ;;
            show)       __show "$2"
                        exit
                ;;
            help)       __help
                        exit
                ;;
                *)      __usage
                        exit
                ;;
        esac
        shift
    done
}

# Print supported releases----------------------------------
__print_release () {
    supported="10.1-RELEASE
                9.3-RELEASE"

    echo "Supported releases are: "
    for rel in $(echo $supported) ; do
        printf "%15s\n" "$rel"
    done
}

__create_basejail () {
    local release="$1"
    local fs_list="bin
                   boot
                   lib
                   libexec
                   rescue
                   sbin
                   usr
                   usr/bin
                   usr/include
                   usr/lib
                   usr/libexec
                   usr/sbin
                   usr/share
                   usr/src
                   usr/libdata
                   usr/lib32"

    echo ""
    echo "Creating basejail ZFS datasets... please wait."

    for fs in $(echo $fs_list) ; do
        zfs create -o compression=lz4 -p $pool/iocage/base/${release}/root/$fs
    done
}

__reclone_basejail () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local jail_release="$(__get_jail_prop release $fulluuid)"

    zfs destroy -rRf $pool/iocage/base@$fulluuid
    zfs snapshot -r  $pool/iocage/base@$fulluuid

    echo "* $fulluuid is a basejail, re-cloning jail.."

    # Re-clone required filesystems
    for fs in $bfs_list ; do
        # echo "  re-cloning: $pool/iocage/jails/$fulluuid/root/$fs"
        zfs clone $pool/iocage/base/$jail_release/root/$fs@$fulluuid \
                  $pool/iocage/jails/$fulluuid/root/$fs
    done
}

# Fetch release and prepare base ZFS filesystems-----------
__fetch_release () {
    local exist=$(zfs list | grep -w ^$pool/iocage)
    __print_release
    echo -n "Please select a release [$release]: "
    read answer
    if [ ! -z "$answer" ] ; then
        release="$answer"
    else
        answer="$release"
    fi

    for rel in $(echo $supported) ; do
        if [ "$answer" == "$rel" ] ; then
            release="$rel"
            match="1"
            break
        fi
    done

    if [ -z $match ] ; then
        echo "Invalid release $release specified, exiting.."
        exit 1
    fi

    local exist=$(zfs list | grep -w ^$pool/iocage)
    local download_exist=$(zfs list | grep -w ^$pool/iocage/download/$release)
    local rel_exist=$(zfs list | grep -w ^$pool/iocage/releases/$release)

    if [ -z "$exist" ] ; then
        zfs create -o compression=lz4 $pool/iocage
        zfs set mountpoint=$iocroot $pool/iocage
        zfs create -o compression=lz4 $pool/iocage/jails
        zfs mount -a
    fi

    if [ -z "$download_exist" ] ; then
        zfs create -o compression=lz4 -p $pool/iocage/download/$release
    fi

    ftpdir="/pub/FreeBSD/releases/amd64/$release"

    cd $iocroot/download/$release
    for file in $ftpfiles ; do
        if [ ! -e "$file" ] ; then
            fetch http://$ftphost$ftpdir/$file
        fi
    done

    if [ -z "$rel_exist" ] ; then
        zfs create -o compression=lz4 -p $pool/iocage/releases/$release/root
    fi

    for file in $(echo $ftpfiles) ; do
        if [ -e "$file" ] ; then
            echo "Extracting: $file"
            chflags -R noschg $iocroot/releases/$release/root
            tar -C $iocroot/releases/$release/root -xf $file
        fi
    done

        echo "* Updating base jail.."
        sleep 2

        env UNAME_r="$release" /usr/sbin/freebsd-update \
            -b $iocroot/releases/$release/root \
            -d $iocroot/releases/$release/root/var/db/freebsd-update/ fetch
        env UNAME_r="$release" /usr/sbin/freebsd-update \
            -b $iocroot/releases/$release/root \
            -d $iocroot/releases/$release/root/var/db/freebsd-update/ install

    if [ ! -d $iocroot/log ] ; then
        mkdir $iocroot/log
    fi

    __create_basejail $release
    chflags -R noschg $iocroot/base/$release/root
    tar --exclude \.zfs --exclude usr/sbin/chown -C $iocroot/releases/$release/root -cf - . | \
    tar --exclude \.zfs --exclude usr/sbin/chown -C $iocroot/base/$release/root -xf -

    if [ ! -e "$iocroot/base/$release/root/usr/sbin/chown" ] ; then
       cd $iocroot/base/$release/root/usr/sbin && ln -s ../bin/chgrp chown
    fi

    etcupdate extract -D $iocroot/base/$release/root \
    -s $iocroot/base/$release/root/usr/src
}

# This creates jails----------------------------------------------------
__create_jail () {
    local installed=$(zfs list -r $pool/iocage/releases|grep $release)

    if [ -z "$installed" ] ; then
        echo "Release $release not found locally, run fetch first"
        exit 1
    fi

    if [ "${2}" = "-c" ] ; then
        fs_list=$(zfs list -rH -o name $pool/iocage/releases/$release)

        zfs snapshot -r $pool/iocage/releases/$release@$uuid
        for fs in $fs_list ; do
            cfs=$(echo $fs | sed s#/releases/$release#/jails/$uuid#g)
            #echo "cloning $fs into $cfs"
            zfs clone $fs@$uuid $cfs
        done
    elif [ "${2}" = "-e" ] ; then
        zfs create -o compression=lz4 -p $pool/iocage/jails/$uuid/root
    elif [ "${2}" = "-b" ] ; then
       export type=basejail
       zfs snapshot -r $pool/iocage/base@$uuid
       zfs create -o compression=lz4 -p $pool/iocage/jails/$uuid/root/usr

       for fs in $bfs_list ; do
           zfs clone -o compression=lz4 -o readonly=on \
           $pool/iocage/base/${release}/root/$fs@$uuid \
           $pool/iocage/jails/$uuid/root/$fs
       done

       for dir in $bdir_list ; do
           cp -a $iocroot/base/${release}/root/$dir \
                 $iocroot/jails/$uuid/root/$dir
       done

    else
        zfs snapshot -r $pool/iocage/releases/$release@$uuid
        zfs send     -R $pool/iocage/releases/$release@$uuid | \
        zfs recv        $pool/iocage/jails/$uuid
        zfs destroy  -r $pool/iocage/releases/$release@$uuid
        zfs destroy  -r $pool/iocage/jails/$uuid@$uuid
    fi

    __configure_jail $pool/iocage/jails/$uuid
    touch $iocroot/jails/$uuid/fstab

    # at create time set the default rc.conf
    if [ "${2}" != "-e" ] ; then
        echo "hostname=\"${hostname}\"" > $iocroot/jails/${uuid}/root/etc/rc.conf
        __jail_rc_conf >> \
        $iocroot/jails/${uuid}/root/etc/rc.conf
        __resolv_conf > $iocroot/jails/${uuid}/root/etc/resolv.conf
    elif [ "${2}" = "-e" ] ; then
        echo $uuid
    fi

    zfs create -o compression=lz4 ${pool}/$jail_zfs_dataset
    zfs set mountpoint=none ${pool}/$jail_zfs_dataset
    zfs set jailed=on ${pool}/$jail_zfs_dataset

    # Install extra packages
    # this requires working resolv.conf in jail
    if [ "$pkglist" != "none" ] ; then
        __pkg_install "$iocroot/jails/${uuid}/root"
    fi
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset="$(__find_jail $name)"

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fs_list="$(zfs list -rH -o name $dataset)"

    if [ -z "$snapshot" ] ; then
        zfs snapshot -r ${dataset}@${uuid}
        for fs in $fs_list ; do
            cfs="$(echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g)"
            zfs clone $fs@$uuid $cfs
        done
    else
        for fs in $fs_list ; do
            cfs="$(echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g)"
            zfs clone $fs@$snapshot $cfs
        done
    fi

    __configure_jail $pool/iocage/jails/$uuid
    mv $iocroot/jails/$uuid/fstab $iocroot/jails/$uuid/fstab.$name
    touch $iocroot/jails/$uuid/fstab

    cat $iocroot/jails/${uuid}/root/etc/rc.conf | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/$uuid/g" \
    > $iocroot/jails/${uuid}/rc.conf

    mv $iocroot/jails/${uuid}/rc.conf \
    $iocroot/jails/${uuid}/root/etc/rc.conf
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset="$(__find_jail $name)"

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local origin="$(zfs get -H -o value origin $dataset)"
    local fulluuid="$(__check_name $name)"
    local jail_path="$(__get_jail_prop mountpoint $fulluuid)"
    local state="$(jls | grep ${jail_path} | wc -l)"
    local jail_type="$(__get_jail_prop type $fulluuid)"
    local jail_release="$(__get_jail_prop release $fulluuid)"

    echo " "
    echo "  WARNING: this will destroy jail $fulluuid"
    echo "  Dataset: $dataset"
    echo " "
    echo -n "  Are you sure ? Y[n]: "
    read answer

    if [ "$answer" == "Y" ]; then
        if [ "$state" -lt "1" ] ; then
            echo "  Destroying: $fulluuid"

            __unlink_tag $dataset

            zfs destroy -fr $dataset

            if [ "$origin" != "-" ] ; then
                echo "  Destroying clone origin: $origin"
                zfs destroy -r $origin
            fi

            if [ $jail_type == "basejail" ] ; then
                zfs destroy -fr $pool/iocage/base/$jail_release@$fulluuid
            fi

        elif [ "$state" -eq "1" ] ; then
            echo "  ERROR: Jail is up and running ..exiting"
            exit 1
        fi
   else
       echo "  Command not confirmed.  No action taken."
   fi

}

# Configure properties -------------------------------------------------
__configure_jail () {
    local CONF="$CONF_NET
                $CONF_JAIL
                $CONF_RCTL
                $CONF_CUSTOM
                $CONF_SYNC"

    echo "Configuring jail.."
    for prop in $CONF ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] ; then
            echo "** $prop_name=$prop"
            zfs set org.freebsd.iocage:$prop_name="$prop" $1
            if [ "$prop_name" == "tag" ] ; then
                __link_tag $1
            fi
        fi
    done

    for prop in $CONF_ZFS ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] && [ "$prop" != "readonly" ] ; then
            zfs set $prop_name="$prop" $1
        fi
    done
}

# Export every property specified on command line ----------------------
__export_props () {
    for i in "$@" ; do
        if [ "$(echo $i | grep -e ".*=.*")" ] ; then
            export "$i"
        fi
    done
}

# Set properties ------------------------------------------------------
__set_jail_prop () {
    local name="$2"
    local property="$1"

    if [ -z "$name" ] || [ -z "$property" ] ; then
        echo "  ERROR: missing property or UUID"
        exit 1
    fi

    local dataset="$(__find_jail $name)"

    if [ -z "$dataset" ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ "$dataset" == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local pname="$(echo $property|awk 'BEGIN { FS = "=" } ; { print $1 }')"
    local pval="$(echo $property|awk 'BEGIN { FS = "=" } ; { print $2 }')"

    if [ -z "$pname" ] || [ -z "$pval" ] ; then
        echo "  ERROR: set failed, incorrect property syntax!"
        exit 1
    fi

    local found="0"

    local CONF="$CONF_NET
                $CONF_JAIL
                $CONF_RCTL
                $CONF_CUSTOM
                $CONF_SYNC"

    for prop in $CONF ; do
        if [ "$prop" == "$pname" ] ; then
            found=1
            zfs set org.freebsd.iocage:${prop}="${pval}" $dataset
            if [ "$pname" == "tag" ] ; then
                __unlink_tag $dataset
                __link_tag $dataset
            fi
        fi
    done

    for prop in $CONF_ZFS ; do
        if [ "$prop" == "$pname" ] ; then
            zfs set $prop="$pval" $dataset
            found=1
        fi
    done

    if [ $found -ne "1" ] ; then
        echo "  ERROR: unsupported property: $pname !"
        exit 1
    fi
}

__get_jail_name () {
    for i in $@; do
        :;
    done

    echo $i
}

__start_jail () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset="$(__find_jail $name)"

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local jail_type="$(__get_jail_prop type $fulluuid)"
    local tag="$(__get_jail_prop tag $fulluuid)"
    local jail_hostid="$(__get_jail_prop hostid $fulluuid)"
    local jail_path="$(__get_jail_prop mountpoint $fulluuid)"
    local template="$(__get_jail_prop template $fulluuid)"
    local cpuset="$(__get_jail_prop cpuset $fulluuid)"
    local procfs="$(__get_jail_prop mount_procfs $fulluuid)"
    local jail_path="$(__get_jail_prop mountpoint $fulluuid)"
    local state="$(jls | grep ${jail_path} | wc -l)"
    local vnet="$(__get_jail_prop vnet $fulluuid)"
    local nics="$(__get_jail_prop interfaces $fulluuid \
               |awk 'BEGIN { FS = "," } ; { print $1,$2,$3,$4 }')"

    if [ "$state" -eq "1" ] ; then
        echo "* ${fulluuid}: is already up"
        exit 1
    fi

    if [ $jail_type == "basejail" ] ; then
        # Re-clone required filesystems
        __reclone_basejail $name
    fi

    for i in $nics ; do
        local nic="$(echo $i | awk 'BEGIN { FS = ":" } ; { print $1 }')"
        local bridge="$(echo $i | awk 'BEGIN { FS = ":" } ; { print $2 }')"

        if [ -z $nic ] || [ -z $bridge ] ; then
            echo "  ERROR  : incorrect interfaces property format"
            echo "  HINT   : check with \"iocage get interfaces $fulluuid\""
            echo "  Example: vnet0:bridge0"
            exit 1
        fi
    done

    if [ $template == "yes" ] ; then
        return
    fi

    if [ "$jail_hostid" != "$hostid" ] ; then
        echo "ERROR: hostid mismatch, start failed!"
        echo "    jail hostid: $jail_hostid"
        echo "  host's hostid: $hostid"
        exit 1
    fi

    if [ "$procfs" == "1" ] ; then
        mount -t procfs proc $iocroot/jails/${fulluuid}/root/proc
    fi

    local jzfs="$(__get_jail_prop jail_zfs $fulluuid)"
    local jzfs_dataset="$(__get_jail_prop jail_zfs_dataset $fulluuid)"

    if [ $jzfs == "on" ] ; then
        __set_jail_prop allow_mount=1 $fulluuid
        __set_jail_prop enforce_statfs=1 $fulluuid
        __set_jail_prop allow_mount_zfs=1 $fulluuid
        zfs set jailed=on ${pool}/$jzfs_dataset
    fi

    if [ $vnet == "on" ] || [ $vnet == "-" ] ; then
        if [ ! -z $(sysctl -qn kern.features.vimage) ] ; then
            echo "* Starting $fulluuid ($tag)"
            __vnet_start $fulluuid

            if [ $? -eq 1 ] ; then
                echo "  ! Start                FAILED"
                exit 1
            else
                echo "  + Started                  OK"
            fi

            echo -n "  + Configuring VNET"
            __networking start $fulluuid

            if [ $? -eq 1 ] ; then
                echo "         FAILED"
            else
                echo "         OK"
            fi
        else
            echo "  ERR: start failed for $fulluuid"
            echo "  vnet=on but kernel is not VNET capable!"
            echo "  Turn vnet off for this jail or recompile kernel with VNET."
            exit 1
        fi
    else
        echo "* Starting $fulluuid ($tag)"
        __legacy_start $fulluuid
        if [ $? -eq 1 ] ; then
            echo "  ! Start                FAILED"
        else
            echo "  + Started (shared IP mode) OK"
        fi
    fi

    cd ${jail_path}/root/dev && ln -s ../var/run/log log

    __rctl_limits $fulluuid

    if [ $cpuset != "off" ] ; then
        echo -n "  + Appliyng CPU affinity"
        local jid="$(jls -j ioc-${fulluuid} jid)"
        cpuset -l $cpuset -j $jid
        if [ $? -eq 1 ] ; then
            echo "    FAILED"
        else
            echo "    OK"
        fi
    fi

    echo -n "  + Starting services"
    jexec ioc-${fulluuid} $(__get_jail_prop exec_start $fulluuid) \
     >> $iocroot/log/${fulluuid}-console.log 2>&1

    if [ $? -eq 1 ] ; then
        echo "        FAILED"
    else
        echo "        OK"
    fi

    if [ $jzfs == "on" ] ; then
        zfs jail ioc-${fulluuid} ${pool}/$jzfs_dataset
    fi

    zfs set org.freebsd.iocage:last_started=$(date "+%F_%T") $dataset

}

# Start a VNET jail
__vnet_start () {
    local name="$1"
    local jail_path="$(__get_jail_prop mountpoint $name)"
    local fdescfs="mount.fdescfs=$(__get_jail_prop mount_fdescfs $name)"
    local tmpfs="allow.mount.tmpfs=$(__get_jail_prop allow_mount_tmpfs $name)"

    if [ "$(uname -U)" == "903000" ];
    then
      fdescfs=""
      tmpfs=""
    fi

    jail -c vnet \
    name="ioc-$(__get_jail_prop host_hostuuid $name)" \
    host.hostname="$(__get_jail_prop hostname $name)" \
    path="${jail_path}/root" \
    securelevel="$(__get_jail_prop securelevel $name)" \
    host.hostuuid="$(__get_jail_prop host_hostuuid $name)" \
    devfs_ruleset="$(__get_jail_prop devfs_ruleset $name)" \
    enforce_statfs="$(__get_jail_prop enforce_statfs $name)" \
    children.max="$(__get_jail_prop children_max $name)" \
    allow.set_hostname="$(__get_jail_prop allow_set_hostname $name)" \
    allow.sysvipc="$(__get_jail_prop allow_sysvipc $name)" \
    allow.raw_sockets="$(__get_jail_prop allow_raw_sockets $name)" \
    allow.chflags="$(__get_jail_prop allow_chflags $name)" \
    allow.mount="$(__get_jail_prop allow_mount $name)" \
    allow.mount.devfs="$(__get_jail_prop allow_mount_devfs $name)" \
    allow.mount.nullfs="$(__get_jail_prop allow_mount_nullfs $name)" \
    allow.mount.procfs="$(__get_jail_prop allow_mount_procfs $name)" \
    ${tmpfs} \
    allow.mount.zfs="$(__get_jail_prop allow_mount_zfs $name)" \
    allow.quotas="$(__get_jail_prop allow_quotas $name)" \
    allow.socket_af="$(__get_jail_prop allow_socket_af $name)" \
    exec.prestart="$(__findscript $name prestart)" \
    exec.poststart="$(__findscript $name poststart)" \
    exec.prestop="$(__findscript $name prestop)" \
    exec.stop="$(__get_jail_prop exec_stop $name)" \
    exec.clean="$(__get_jail_prop exec_clean $name)" \
    exec.timeout="$(__get_jail_prop exec_timeout $name)" \
    stop.timeout="$(__get_jail_prop stop_timeout $name)" \
    mount.fstab="${jail_path}/fstab" \
    mount.devfs="$(__get_jail_prop mount_devfs $name)" \
    ${fdescfs} \
    allow.dying \
    exec.consolelog="$iocroot/log/${name}-console.log" \
    persist
}

# Start a shared IP jail
__legacy_start () {
    local name="$1"
    local jail_path="$(__get_jail_prop mountpoint $name)"
    local ip4_addr="$(__get_jail_prop ip4_addr $name)"
    local ip6_addr="$(__get_jail_prop ip6_addr $name)"

    local fdescfs="mount.fdescfs=$(__get_jail_prop mount_fdescfs $name)"
    local tmpfs="allow.mount.tmpfs=$(__get_jail_prop allow_mount_tmpfs $name)"

    if [ "$(uname -U)" == "903000" ];
    then
      fdescfs=""
      tmpfs=""
    fi


    if [ $ip4_addr == "none" ] ; then
        ip4_addr=""
    fi

    if [ $ip6_addr == "none" ] ; then
        ip6_addr=""
    fi

    if [ $ipv6 == "on" ] ; then
        jail -c \
        ip4.addr="$ip4_addr" \
        ip4.saddrsel="$(__get_jail_prop ip4_saddrsel $name)" \
        ip4="$(__get_jail_prop ip4 $name)" \
        ip6.addr="$ip6_addr" \
        ip6.saddrsel="$(__get_jail_prop ip6_saddrsel $name)" \
        ip6="$(__get_jail_prop ip6 $name)" \
        name="ioc-$(__get_jail_prop host_hostuuid $name)" \
        host.hostname="$(__get_jail_prop hostname $name)" \
        path="${jail_path}/root" \
        securelevel="$(__get_jail_prop securelevel $name)" \
        host.hostuuid="$(__get_jail_prop host_hostuuid $name)" \
        devfs_ruleset="$(__get_jail_prop devfs_ruleset $name)" \
        enforce_statfs="$(__get_jail_prop enforce_statfs $name)" \
        children.max="$(__get_jail_prop children_max $name)" \
        allow.set_hostname="$(__get_jail_prop allow_set_hostname $name)" \
        allow.sysvipc="$(__get_jail_prop allow_sysvipc $name)" \
        allow.raw_sockets="$(__get_jail_prop allow_raw_sockets $name)" \
        allow.chflags="$(__get_jail_prop allow_chflags $name)" \
        allow.mount="$(__get_jail_prop allow_mount $name)" \
        allow.mount.devfs="$(__get_jail_prop allow_mount_devfs $name)" \
        allow.mount.nullfs="$(__get_jail_prop allow_mount_nullfs $name)" \
        allow.mount.procfs="$(__get_jail_prop allow_mount_procfs $name)" \
	${tmpfs} \
        allow.mount.zfs="$(__get_jail_prop allow_mount_zfs $name)" \
        allow.quotas="$(__get_jail_prop allow_quotas $name)" \
        allow.socket_af="$(__get_jail_prop allow_socket_af $name)" \
        exec.prestart="$(__findscript $name prestart)" \
        exec.poststart="$(__findscript $name poststart)" \
        exec.prestop="$(__findscript $name prestop)" \
        exec.stop="$(__get_jail_prop exec_stop $name)" \
        exec.clean="$(__get_jail_prop exec_clean $name)" \
        exec.timeout="$(__get_jail_prop exec_timeout $name)" \
        stop.timeout="$(__get_jail_prop stop_timeout $name)" \
        mount.fstab="${jail_path}/fstab" \
        mount.devfs="$(__get_jail_prop mount_devfs $name)" \
	${fdescfs} \
        allow.dying \
        exec.consolelog="$iocroot/log/${name}-console.log" \
        persist
    else
        jail -c \
        ip4.addr="$ip4_addr" \
        ip4.saddrsel="$(__get_jail_prop ip4_saddrsel $name)" \
        ip4="$(__get_jail_prop ip4 $name)" \
        name="ioc-$(__get_jail_prop host_hostuuid $name)" \
        host.hostname="$(__get_jail_prop hostname $name)" \
        path="${jail_path}/root" \
        securelevel="$(__get_jail_prop securelevel $name)" \
        host.hostuuid="$(__get_jail_prop host_hostuuid $name)" \
        devfs_ruleset="$(__get_jail_prop devfs_ruleset $name)" \
        enforce_statfs="$(__get_jail_prop enforce_statfs $name)" \
        children.max="$(__get_jail_prop children_max $name)" \
        allow.set_hostname="$(__get_jail_prop allow_set_hostname $name)" \
        allow.sysvipc="$(__get_jail_prop allow_sysvipc $name)" \
        allow.raw_sockets="$(__get_jail_prop allow_raw_sockets $name)" \
        allow.chflags="$(__get_jail_prop allow_chflags $name)" \
        allow.mount="$(__get_jail_prop allow_mount $name)" \
        allow.mount.devfs="$(__get_jail_prop allow_mount_devfs $name)" \
        allow.mount.nullfs="$(__get_jail_prop allow_mount_nullfs $name)" \
        allow.mount.procfs="$(__get_jail_prop allow_mount_procfs $name)" \
	${tmpfs} \
        allow.mount.zfs="$(__get_jail_prop allow_mount_zfs $name)" \
        allow.quotas="$(__get_jail_prop allow_quotas $name)" \
        allow.socket_af="$(__get_jail_prop allow_socket_af $name)" \
        exec.prestart="$(__findscript $name prestart)" \
        exec.poststart="$(__findscript $name poststart)" \
        exec.prestop="$(__findscript $name prestop)" \
        exec.stop="$(__get_jail_prop exec_stop $name)" \
        exec.clean="$(__get_jail_prop exec_clean $name)" \
        exec.timeout="$(__get_jail_prop exec_timeout $name)" \
        stop.timeout="$(__get_jail_prop stop_timeout $name)" \
        mount.fstab="${jail_path}/fstab" \
        mount.devfs="$(__get_jail_prop mount_devfs $name)" \
	${fdescfs} \
        allow.dying \
        exec.consolelog="$iocroot/log/${name}-console.log" \
        persist
    fi
}

__stop_jail () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local jail_path="$(__get_jail_prop mountpoint $name)"
    local tag="$(__get_jail_prop tag $fulluuid)"
    local exec_prestop="$(__findscript $fulluuid prestop)"
    local exec_stop="$(__get_jail_prop exec_stop $fulluuid)"
    local exec_poststop="$(__findscript $fulluuid poststop)"
    local vnet="$(__get_jail_prop vnet $fulluuid)"
    local state="$(jls | grep ${jail_path} | wc -l)"

    if [  "$state" -lt "1" ] ; then
        echo "* ${fulluuid}: is already down"
        exit 1
    fi

    echo "* Stopping $fulluuid ($tag)"

    echo -n "  + Running pre-stop"
    echo "$exec_prestop" | sh
    if [ $? -ne 1 ] ; then
        echo "         OK"
    else
        echo "     FAILED"
    fi

    echo -n "  + Stopping services"

    jexec ioc-${fulluuid} $exec_stop >> $iocroot/log/${fulluuid}-console.log 2>&1

    if [ $? -ne 1 ] ; then
        echo "        OK"
    else
        echo "    FAILED"
    fi

    if [ $vnet == "on" ] ; then
        echo -n "  + Tearing down VNET"
        __networking stop $fulluuid
        if [ $? -eq 1 ] ; then
            echo "        FAILED"
        else
            echo "        OK"
        fi
    else
        __stop_legacy_networking $name
    fi

    echo -n "  + Removing jail process"
    jail -r ioc-${fulluuid}

    if [ $? -ne 1 ] ; then
        echo "    OK"
    else
        echo "FAILED"
    fi

    echo -n "  + Running post-stop"
    echo "$exec_poststop" | sh
    if [ $? -ne 1 ] ; then
        echo "        OK"
    else
        echo "    FAILED"
    fi

    umount -afvF ${jail_path}/fstab > /dev/null 2>&1
    umount ${jail_path}/root/dev/fd > /dev/null 2>&1
    umount ${jail_path}/root/dev    > /dev/null 2>&1
    umount ${jail_path}/root/proc   > /dev/null 2>&1

    if [ -d $iocroot/jails/${fulluuid}/recorded ] ; then
        umount -ft unionfs $iocroot/jails/${fulluuid}/root > /dev/null 2>&1
    fi

    if [ ! -z $(sysctl -qn kern.features.rctl) ] ; then
        local rlimits="$(rctl | grep $fulluuid| wc -l)"
        if [ $rlimits -gt "0" ] ; then
            rctl -r jail:ioc-${fulluuid}
        fi
    fi
}

# Soft restart
__restart_jail () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset="$(__find_jail $name)"

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local exec_stop="$(__get_jail_prop exec_stop $fulluuid)"
    local exec_start="$(__get_jail_prop exec_start $fulluuid)"
    local jid="$(jls -j ioc-${fulluuid} jid)"
    local tag="$(__get_jail_prop tag $fulluuid)"

    echo "* Soft restarting $fulluuid ($tag)"
    jexec ioc-${fulluuid} $exec_stop >> $iocroot/log/${fulluuid}-console.log 2>&1

    if [ $? -ne "1" ] ; then
        pkill -j $jid
        jexec ioc-${fulluuid} $exec_start >> $iocroot/log/${fulluuid}-console.log 2>&1
        zfs set org.freebsd.iocage:last_started=$(date "+%F_%T") $dataset
    else
        echo "  ERROR: soft restart failed.."
        exit 1
    fi
}

__rc_jails () {
    local action=$1
    local jails=$(__find_jail ALL)
    local boot_list="/tmp/iocage.$$"

    for jail in $jails ; do
        local name="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid \
                    $jail)"
        local boot="$(zfs get -H -o value org.freebsd.iocage:boot $jail)"
        local priority="$(zfs get -H -o value org.freebsd.iocage:priority \
                        $jail)"

        if [ "$boot" == "on" ] ; then
            echo "${priority},${name}" >> $boot_list
        fi
    done

    if [ -e $boot_list ] ; then
        local boot_order=$(sort -n $boot_list)
        local shutdown_order=$(sort -rn $boot_list)
    else
        echo "  ERROR: None of the jails have boot on"
        exit 1
    fi

    if [ "$action" == "boot" ] ; then
        echo "* [I|O|C] booting jails... "

        for i in $boot_order ; do
            local jail="$(echo $i | cut -f2 -d,)"
            local jail_path="$(__get_jail_prop mountpoint $jail)"
            local state="$(jls | grep ${jail_path} | wc -l)"

            if [ "$state" -lt "1" ] ; then
                __start_jail $jail
            fi
        done

    elif [ "$action" == "shutdown" ] ; then
        echo "* [I|O|C] shutting down jails... "

        for i in $shutdown_order ; do
            local jail="$(echo $i | cut -f2 -d,)"
            local jail_path="$(__get_jail_prop mountpoint $jail)"
            local state="$(jls | grep ${jail_path} | wc -l)"

            if [ "$state" -eq "1" ] ; then
                __stop_jail $jail
            fi
        done

    fi

    rm $boot_list
}

__networking () {
    action="$1"
    local name="$2"
    local jid="$(jls -j ioc-$name jid)"
    local ip4="$(__get_jail_prop ip4_addr $name)"
    local ip6="$(__get_jail_prop ip6_addr $name)"
    local defaultgw="$(__get_jail_prop defaultrouter $name)"
    local defaultgw6="$(__get_jail_prop defaultrouter6 $name)"
    local nics="$(__get_jail_prop interfaces $name \
               |awk 'BEGIN { FS = "," } ; { print $1,$2,$3,$4 }')"
    local ip4_list="$(echo $ip4 | sed 's/,/ /g')"
    local ip6_list="$(echo $ip6 | sed 's/,/ /g')"

    if [ $action == "start" ] ; then
        for i in $nics ; do
            local nic=$(echo $i | awk 'BEGIN { FS = ":" } ; { print $1 }')
            local bridge=$(echo $i | awk 'BEGIN { FS = ":" } ; { print $2 }')
	    local memberif=$(ifconfig $bridge | grep member | head -n1 | cut -d' ' -f2)
	    local brmtu=$(ifconfig $memberif | head -n1 |cut -d' ' -f6)
            epair_a=$(ifconfig epair create)
            epair_b=$(echo $epair_a | sed s/a\$/b/)
            ifconfig ${epair_a} name ${nic}:${jid} mtu $brmtu
            ifconfig ${nic}:${jid} description "associated with jail: $name"
            ifconfig $epair_b vnet ioc-${2}
            jexec ioc-${2} ifconfig $epair_b name $nic mtu $brmtu
            ifconfig $bridge addm ${nic}:${jid} up
            ifconfig ${nic}:${jid} up
        done

        if [ "$ip4" != "none" ] ; then
            for i in $ip4_list ; do
                iface="$(echo $i |awk 'BEGIN { FS = "|" } ; { print $1 }')"
                ip="$(echo $i |awk 'BEGIN { FS = "|" } ; { print $2 }')"
                jexec ioc-${2} ifconfig $iface $ip up
            done
        fi

        if [ "$ip6" != "none" ] ; then
            for i in $ip6_list ; do
                iface="$(echo $i |awk 'BEGIN { FS = "|" } ; { print $1 }')"
                ip="$(echo $i |awk 'BEGIN { FS = "|" } ; { print $2 }')"
                jexec ioc-${2} ifconfig $iface inet6 $ip up
            done
        fi

        if [ "$defaultgw" != "none" ] ; then
            jexec ioc-${2} route add default $defaultgw > /dev/null
        fi

	if [ "$defaultgw6" != "none" ] ; then
	    jexec ioc-${2} route add -6 default $defaultgw6 >/dev/null
	fi

    elif [ $action == "stop" ] ; then
        for if in $nics ; do
            local nic=$(echo $if | cut -f 1 -d:)
            ifconfig ${nic}:${jid} destroy
        done
    fi
}

__stop_legacy_networking () {
    local name="$1"

    local ip4_addr="$(__get_jail_prop ip4_addr $name)"
    local ip6_addr="$(__get_jail_prop ip6_addr $name)"

    if [ $ip4_addr != "none" ] ; then
        IFS=','
        for ip in $ip4_addr ; do
            local iface="$(echo $ip | \
                         awk 'BEGIN { FS = "|" } ; { print $1 }')"
            local ip4="$(echo $ip | \
                       awk 'BEGIN { FS = "|" } ; { print $2 }' | \
                       awk 'BEGIN { FS = "/" } ; { print $1 }')"

            ifconfig $iface $ip4 -alias
        done
    fi

    if [ $ip6_addr != "none" ] ; then
        IFS=','
        for ip6 in $ip6_addr ; do
            local iface="$(echo $ip6 | \
                         awk 'BEGIN { FS = "|" } ; { print $1 }')"
            local ip6="$(echo $ip6 | \
                       awk 'BEGIN { FS = "|" } ; { print $2 }' | \
                       awk 'BEGIN { FS = "/" } ; { print $1 }')"
            ifconfig $iface inet6 $ip6 -alias
        done
    fi
}

__rctl_limits () {
    local name="$1"
    local failed=0

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local rlimits="$(__get_jail_prop rlimits $fulluuid)"

    if [ $rlimits == "on" ] ; then
        echo -n "  + Applying resource limits"
        for prop in $CONF_RCTL ; do
            value="$(__get_jail_prop $prop $fulluuid)"
            limit=$(echo $value | awk 'BEGIN { FS = ":" } ; { print $1 }')
            action=$(echo $value | awk 'BEGIN { FS = ":" } ; { print $2 }')

            if [ $limit == "off" ] ; then
                continue
            else
                if [ -z "$limit" ] || [ -z "$action" ] ; then
                    echo -n "  ERROR: incorrect resource limit: $limit action: "
                    echo "$action for property: $prop"
                    echo "  HINT : check man page for syntax."
                else
                    rctl -a jail:ioc-${fulluuid}:${prop}:${action}=${limit}
                    if [ $? -eq 1 ] ; then
                        echo "    FAILED to apply ${prop}=${action}:${limit}"
                        failed=1
                    fi
                fi
            fi
        done
        if [ $failed -ne 1 ] ; then
            echo " OK"
        fi
    fi
}

__rctl_list () {
    local name="$1"

    if [ -z "$name" ] ; then
        echo "* All active limits:"
        rctl | grep jail
    else
        local fulluuid="$(__check_name $name)"
        local jid="$(jls -j ioc-${fulluuid} jid)"
        local limits="$(rctl -h | grep $fulluuid)"

        echo "* Active limits for jail: $fulluuid"

        for i in $limits ; do
            limit=$(echo $i | cut -f 3,4 -d:)
            echo "  - $limit"
        done

        if [ ! -z "$jid" ] ; then
            echo "* CPU set: $(cpuset -g -j $jid | cut -f2 -d:)"
        fi
    fi
}

__rctl_uncap () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    echo "  Releasing resource limits.."
    rctl -r jail:ioc-${fulluuid}
    echo "  Listing active rules for jail:"
    rctl | grep $fulluuid
}


__rctl_used () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    echo "Consumed resources:"
    echo "-------------------"
    rctl -hu jail:ioc-${fulluuid}
}


__console () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local login_flags=$(zfs get -H -o value org.freebsd.iocage:login_flags \
                       $pool/iocage/jails/$fulluuid)

    jexec ioc-${fulluuid} login $login_flags
}


__exec () {
    local jexecopts=

    # check for -U or -u to pass to jexec
    while getopts u:U: opt "$@"; do
        case "$opt" in
            [uU]) jexecopts="$jexecopts -$opt $OPTARG";;
            ?)    echo "  ERROR: invalid exec option: $opt"
                  exit 1
                  ;;
        esac
    done
    shift $(expr $OPTIND - 1)

    local name=$1
    shift

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    jexec $jexecopts ioc-${fulluuid} "$@"
}


__chroot () {
    local name="$1"
    local command="$2"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    chroot $iocroot/jails/${fulluuid}/root $command
}


__snapshot () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local date=$(date "+%F_%T")

    if [ ! -z $snapshot ] ; then
        zfs snapshot -r ${dataset}@${snapshot}
    else
        zfs snapshot -r ${dataset}@ioc-${date}
    fi
}


__snapremove () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: jail dataset not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    if [ ! -z $snapshot ] ; then
        echo "* removing snapshot: ${snapshot}"
        zfs destroy -r ${dataset}@${snapshot}
    else
        echo "  ERROR: snapshot not found"
        exit 1
    fi
}

__snaplist () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local snapshots="$(zfs list -Hrt snapshot -d1 $dataset | awk '{print $1}')"

    printf "%-36s  %-21s  %s   %s\n" "NAME" "CREATED"\
            "RSIZE" "USED"

    for i in $snapshots ; do
        local snapname=$(echo $i|cut -f 2 -d \@)
        local creation="$(zfs get -H -o value creation $i)"
        local used="$(zfs get -H -o value used $i)"
        local referenced="$(zfs get -H -o value referenced $i)"

        printf "%-36s  %-21s  %s    %s\n" "$snapname" "$creation"\
                   "$referenced" "$used"
    done

}

__rollback () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
    local dataset=$(__find_jail $name)

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fs_list=$(zfs list -rH -o name $dataset)

    if [ ! -z "$snapshot" ] ; then
        for fs in $fs_list ; do
            echo "* Rolling back to ${fs}@${snapshot}"
            zfs rollback -r ${fs}@${snapshot}
        done
    fi
}


__promote () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fs_list=$(zfs list -rH -o name $dataset)

    if [ -z $dataset ] ; then
        echo "  ERROR: dataset not found"
        exit 1
    fi

    for fs in $fs_list ; do
        local origin="$(zfs get -H -o value origin $fs)"

        if [ "$origin" != "-" ] ; then
            echo "* promoting filesystem: $fs"
            zfs promote $fs
            continue
        else
            echo "  INFO: filesystem $fs is not a clone"
        fi
    done
}

__record () {
    local name=$2
    local action=$1

    if [ -z $action ] ; then
        echo "  ERROR: missing action or UUID"
        exit 1
    fi

    if [ -z $name ] ; then
        echo "  ERROR: missing action or UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local mountpoint="$(__get_jail_prop mountpoint $fulluuid)"
    local union_mount="$(mount -t unionfs | grep $fulluuid | wc -l)"

    if [ ! -d ${mountpoint}/recorded ] ; then
        mkdir ${mountpoint}/recorded
    fi


    if [ $action == "start" ] ; then
        echo "* Recording to: ${mountpoint}/recorded"

        if [ $union_mount -lt 1 ] ; then
            mount -t unionfs -o noatime,copymode=transparent \
            ${mountpoint}/recorded/ ${mountpoint}/root
        fi

    elif [ $action == "stop" ] ; then
        umount -ft unionfs $iocroot/jails/${fulluuid}/root > /dev/null 2>&1
        echo "* Stopped recording to: ${mountpoint}/recorded"

        find ${mountpoint}/recorded/ -type d -empty -exec rm -rf {} \; \
        > /dev/null 2>&1
        find ${mountpoint}/recorded/ -type f -size 0 -exec rm -f {} \; \
        > /dev/null 2>&1
        find ${mountpoint}/recorded/ -name "utx.*" -exec rm -f {} \; \
        > /dev/null 2>&1
        find ${mountpoint}/recorded/ -name .history -exec rm -f {} \; \
        > /dev/null 2>&1
    fi
}

__package () {
    # create package from recorded changes
    # sha256 too
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"

    local mountpoint="$(__get_jail_prop mountpoint $fulluuid)"

    if [ ! -d ${mountpoint}/recorded ] ; then
        echo "  ERROR: nothing to package, missing recorded directory!"
        echo "  HINT: have you recorded the jail?"
        exit 1
    fi

    if [ ! -d "$iocroot/packages" ] ; then
        mkdir $iocroot/packages
    fi

    echo "* Creating package..."
    tar -cvJf $iocroot/packages/$fulluuid.tar.xz -C ${mountpoint}/recorded . && \
    sha256 -q $iocroot/packages/$fulluuid.tar.xz > $iocroot/packages/$fulluuid.sha256
    echo "* Package saved to: $iocroot/packages/$fulluuid.tar.xz"
    echo "* Checksum created: $iocroot/packages/$fulluuid.sha256"
}

__import () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing package UUID"
        exit 1
    fi

    local package="$(find $iocroot/packages/ -name $name\*.tar.xz)"
    local image="$(find $iocroot/images/ -name $name\*.tar.xz)"
    local pcount="$(echo $package|wc -w)"
    local icount="$(echo $image|wc -w)"

    if [ $pcount -gt 1 ] ; then
        echo "  ERROR: multiple matching packages, please narrow down UUID."
        exit 1
    elif [ $pcount -eq 1 ] ; then
        local pcksum="$(find $iocroot/packages/ -name $name\*.sha256)"
    fi

    if [ $icount -gt 1 ] ; then
        echo "  ERROR: multiple matching images, please narrow down UUID."
        exit 1
    elif [ $icount -eq 1 ] ; then
        local icksum="$(find $iocroot/images/ -name $name\*.sha256)"
    fi

    if [ $pcount -gt 0 ] && [ $icount -gt 0 ] ; then
        echo "  ERROR: same UUID is matching both a package and an image."
        exit 1
    fi

    if [ $pcount -gt 0 ] ; then
        echo "* Found package $package"
        echo "* Importing package $package"

        if [ ! -f $pcksum ] ; then
            echo "  ERROR: missing checksum file!"
            exit 1
        fi

        local new_cksum="$(sha256 -q $package)"
        local old_cksum="$(cat $pcksum)"
        local uuid="$(__create_jail create | grep uuid | cut -f2 -d=)"
        local mountpoint="$(__get_jail_prop mountpoint $uuid)"

        if [ $new_cksum != $old_cksum ] ; then
            echo "  ERROR: checksum mismatch ..exiting"
            exit 1
        else
            tar -xvJf $package -C $mountpoint/root
        fi

    elif [ $icount -gt 0 ] ; then
        echo "* Found image $image"
        echo "* Importing image $image"

        if [ ! -f $icksum ] ; then
            echo "  ERROR: missing checksum file!"
            exit 1
        fi

        local new_cksum="$(sha256 -q $image)"
        local old_cksum="$(cat $icksum)"
        local uuid="$(__create_jail create -e|tail -1)"
        local mountpoint="$(__get_jail_prop mountpoint $uuid)"

        if [ $new_cksum != $old_cksum ] ; then
            echo "  ERROR: checksum mismatch ..exiting"
            exit 1
        else
            tar -xvJf $image -C $mountpoint/root
        fi

    else
        echo "  ERROR: package or image $name not found!"
        exit 1
    fi

    cat $iocroot/jails/${uuid}/root/etc/rc.conf | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/$uuid/g" \
    > $iocroot/jails/${uuid}/rc.conf

    mv $iocroot/jails/${uuid}/rc.conf \
    $iocroot/jails/${uuid}/root/etc/rc.conf
}

__export () {
    # Export full jail
    # sha256
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local jail_path="$(__get_jail_prop mountpoint $fulluuid)"
    local state=$(jls|grep ${jail_path} | wc -l)

    if [ "$state" -gt "0" ] ; then
        echo "  ERROR: $fulluuid is running!"
        echo "  Stop jail before exporting!"
        exit 1
    fi

    local mountpoint="$(__get_jail_prop mountpoint $fulluuid)"

    if [ ! -d "$iocroot/images" ] ; then
        mkdir $iocroot/images
    fi

    echo "* Exporting $fulluuid .."
    tar -cvJf $iocroot/images/$fulluuid.tar.xz -C ${mountpoint}/root . && \
    sha256 -q $iocroot/images/$fulluuid.tar.xz > $iocroot/images/$fulluuid.sha256
    echo "* Image saved to: $iocroot/images/$fulluuid.tar.xz"
    echo "* Checksum created: $iocroot/images/$fulluuid.sha256"

}

__check_name () {
    local name=$1

    if [ -z $name ] ; then
        echo "ERROR"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: jail $name not found!"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local uuid="$(__get_jail_prop host_hostuuid $name)"

    echo "$uuid"

}

# reads tag property from given jail dataset
# creates symlink from $iocroot/tags/<tag> to $iocroot/jails/<uuid>
__link_tag () {
    local dataset=$1
    local mountpoint
    local tag

    if mountpoint=$(zfs get -H -o value mountpoint $dataset) ; then
        if tag=$(zfs get -H -o value org.freebsd.iocage:tag $dataset); then
            mkdir -p $iocroot/tags
            if [ ! -e $iocroot/tags/$tag ] ; then
                ln -s $mountpoint $iocroot/tags/$tag
            else
                echo "  ERROR: tag already exists, can not symlink: $tag"
                exit 1
            fi
        fi
    else
        echo "  ERROR: no such dataset: $dataset"
        exit 1
    fi
}

# removes all symlinks found in $iocroot/tags pointing to the given jail dataset
__unlink_tag () {
    local dataset=$1
    local mountpoint

    if mountpoint=$(zfs get -H -o value mountpoint $dataset) ; then
        find $iocroot/tags -type l -lname "${mountpoint}*" -exec rm -f \{\} \;
    fi
}

__pkg_install () {
    local chrootdir="$1"

    if [ -e $pkglist ] ; then
        echo "* Installing extra packages.."
        for i in $(cat $pkglist) ; do
            pkg -c $chrootdir install -qy $i
        done
    fi
}

__jail_rc_conf () {
cat << EOT

cron_flags="$cron_flags -J 15"

# Disable Sendmail by default
sendmail_enable="NONE"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"

# Run secure syslog
syslogd_flags="-c -ss"

# Enable IPv6
ipv6_activate_all_interfaces="YES"
EOT
}

# This is mostly for pkg autoinstall
__resolv_conf () {
    cat /etc/resolv.conf
}

# search for executable prestart|poststart|prestop|poststop in jail_dir first,
# else use jail exec_<type> property unchanged
__findscript () {
    local name=$1
    # type should be one of prestart|poststart|prestop|poststop
    local type=$2
    local jail_path="$(__get_jail_prop mountpoint $name)"

    if [ -x "${jail_path}/${type}" ]; then
        echo "${jail_path}/${type}"
    else
        echo "$(__get_jail_prop exec_${type} $name)"
    fi
}

if [ -z "$1" ] ; then
    __usage
    exit 0
fi

if [ "$1" == "help" ] ; then
    __help
    exit 0
fi


if [ "$(whoami)" != "root" ] ; then
    echo "* Only root can manage jails!"
    exit 1
fi

__find_mypool
__parse_cmd "$@"
