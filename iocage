#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2014 Peter Toth (pannon)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

unset LC_ALL
unset LANG

PATH=${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin


if [ "${1}" = "--version" -o "${1}" = "version" ] ; then
    echo "iocage 1.1 (2014/06/24)"
    exit 0
fi

# Auto UUID
uuid=`uuidgen`

# Network defaults for jails
interfaces="vnet0:bridge0,vnet1:bridge1"
host_hostname=$uuid
exec_fib=0
hostname=$uuid

# Standard jail properties
devfs_ruleset="4"
exec_start="/bin/sh /etc/rc"
exec_stop="/bin/sh /etc/rc.shutdown"
exec_prestart="/usr/bin/true"
exec_poststart="/usr/bin/true"
exec_prestop="/usr/bin/true"
exec_poststop="/usr/bin/true"
exec_clean=1
exec_timeout=60
stop_timeout=30
exec_jail_user=root
exec_system_jail_user=0
exec_system_user=root
mount_devfs=1
mount_fdescfs=1
enforce_statfs="2"
children_max="0"
login_flags='-f root'
securelevel="3"
host_hostuuid=$uuid
allow_set_hostname=1
allow_sysvipc=0
allow_raw_sockets=0
allow_chflags=0
allow_mount=0
allow_mount_devfs=0
allow_mount_nullfs=0
allow_mount_procfs=0
allow_mount_tmpfs=0
allow_mount_zfs=0
allow_quotas=0
allow_socket_af=0

# RCTL limits
cpuset="off"
rlimits="off"
memoryuse="8G:log"
memorylocked="off"
vmemoryuse="off"
maxproc="off"
cputime="off"
pcpu="off"
datasize="off"
stacksize="off"
coredumpsize="off"
openfiles="off"
pseudoterminals="off"
swapuse="off"
nthr="off"
msgqqueued="off"
msgqsize="off"
nmsgq="off"
nsemop="off"
nshm="off"
shmsize="off"
wallclock="off"

# Custom properties
tag=`date "+%F@%T"`
template="no"
boot="off"
notes="none"
owner="root"
priority="99"
last_started="none"
type="jail"
release=`uname -r|cut -f 1,2 -d'-'`
hostid=`cat /etc/hostid`

# Native ZFS properties
compression="lz4"
origin="readonly"
quota="15G"
mountpoint="readonly"
compressratio="readonly"
available="readonly"
used="readonly"
dedup="off"
reservation="none"

# Sync properties
sync_state="none"
sync_target="none"
sync_tgt_zpool="none"

# FTP variables
ftphost="ftp.freebsd.org"
ftpfiles="base.txz doc.txz lib32.txz"

# Resource limits
CONF_RCTL="memoryuse
           memorylocked
           vmemoryuse
           maxproc
           cputime
           pcpu
           datasize
           stacksize
           coredumpsize
           openfiles
           pseudoterminals
           swapuse
           nthr
           msgqqueued
           msgqsize
           nmsgq
           nsemop
           nshm
           shmsize
           wallclock"

# Networking configuration
CONF_NET="interfaces
          host_hostname
          hostname
          exec_fib"

# Native jail properties
CONF_JAIL="devfs_ruleset
           mount_devfs
           exec_start
           exec_stop
           exec_prestart
           exec_prestop
           exec_poststop
           exec_poststart
           exec_clean
           exec_timeout
           stop_timeout
           exec_jail_user
           exec_system_jail_user
           exec_system_user
           mount_fdescfs
           mount_procfs
           enforce_statfs
           children_max
           login_flags
           securelevel
           allow_set_hostname
           allow_sysvipc
           allow_raw_sockets
           allow_chflags
           allow_mount
           allow_mount_devfs
           allow_mount_nullfs
           allow_mount_procfs
           allow_mount_tmpfs
           allow_mount_zfs
           allow_quotas
           allow_socket_af
           host_hostuuid"

# Custom properties
CONF_CUSTOM="tag
             template
             rlimits
             boot
             notes
             owner
             priority
             last_started
             type
             hostid
             cpuset
             release"

# Native ZFS properties
CONF_ZFS="compression
          origin
          quota
          mountpoint
          compressratio
          available
          used
          dedup
          reservation"

# ZFS sync (not used yet)
CONF_SYNC="sync_stat
           sync_target
           sync_tgt_zpool"

# ftp properties
CONF_FTP="ftphost ftpdir"

# Process command line options-------------------------
__parse_cmd () {
    while [ $# -gt 0 ] ; do
        case "$1" in
            list)       __list_jails $@
                        exit 0
                ;;
            console)    __console $2
                        exit 0
                ;;
            chroot)     __chroot $2
                        exit 0
                ;;
            defaults)   __print_defaults
                        exit 0
                ;;
            create)     __export_props $@
                        __create_jail $@
                        exit 0
                ;;
            destroy)    __destroy_jail $2
                        exit 0
                ;;
            clone)      __export_props $@
                        __clone_jail $2
                        exit 0
                ;;
            fetch)      __fetch_release
                        exit 0
                ;;
            get)        __get_jail_prop $@
                        exit 0
                ;;
            set)        __export_props "$@"
                        __set_jail_prop "$@"
                        exit 0
                ;;
            start)      __start_jail $2
                        exit 0
                ;;
            stop)       __stop_jail $2
                        exit 0
                ;;
            restart)    __restart_jail $2
                        exit 0
                ;;
            rcboot)     __rc_jails boot
                        exit 0
                ;;
            rcshutdown) __rc_jails shutdown
                        exit 0
                ;;
            df)         __print_disk
                        exit 0
                ;;
            snapshot)   __snapshot $2
                        exit 0
                ;;
            snaplist)   __snaplist $2
                        exit 0
                ;;
            snapremove) __snapremove $2
                        exit 0
                ;;
            promote)    __promote $2
                        exit 0
                ;;
            rollback)   __rollback $2
                        exit 0
                ;;
            uncap)      __rctl_uncap $2
                        exit 0
                ;;
            cap)        __rctl_limits $2
                        exit 0
                ;;
            limits)     __rctl_list $2
                        exit 0
                ;;
            inuse)      __rctl_used $2
                        exit 0
                ;;
            runtime)    __runtime $2
                        exit 0
                ;;
            update)     __update $2
                        exit 0
                ;;
            help)       __help
                        exit 0
                ;;
                *)      __usage
                        exit 0
                ;;
        esac
        shift
    done
}

# Print defaults set in this script---------------------------
__print_defaults () {
    CONF="$CONF_NET
          $CONF_JAIL
          $CONF_RCTL
          $CONF_CUSTOM
          $CONF_ZFS
          $CONF_SYNC
          $CONF_FTP"

    for prop in `echo $CONF`  ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] ; then
            echo "$prop_name=$prop"
        fi
    done
}

# Print supported releases----------------------------------
__print_release () {
    supported="10.0-RELEASE
                9.2-RELEASE
                9.1-RELEASE"

    echo "Supported releases are: " 
    for rel in `echo $supported` ; do
        printf "%15s\n" "$rel"
    done
}

# Fetch release and prepare base ZFS filesystems-----------
__fetch_release () {
    local exist=`zfs list | grep -w ^$pool/iocage`
    __print_release
    echo -n "Please specify release [$release]: "
    read answer
    if [ ! -z "$answer" ] ; then
        release=$answer
    else
        answer=$release
    fi

    for rel in `echo $supported` ; do
        if [ "$answer" == "$rel" ] ; then
            release=$rel
            match="1"
            break
        fi
    done

    if [ -z $match ] ; then
        echo "Invalid release $release specified, exiting.."
        exit 1
    fi
  
    local exist=`zfs list | grep -w ^$pool/iocage`
    local download_exist=`zfs list | grep -w ^$pool/iocage/download/$release`
    local rel_exist=`zfs list | grep -w ^$pool/iocage/releases/$release`

    if [ -z "$exist" ] ; then
        zfs create $pool/iocage
        zfs set mountpoint=/iocage $pool/iocage
        zfs create $pool/iocage/jails
    fi 

    if [ -z "$download_exist" ] ; then
        zfs create -p $pool/iocage/download/$release
    fi

    ftpdir="/pub/FreeBSD/releases/amd64/$release"

    cd /iocage/download/$release
    for file in $ftpfiles ; do
        if [ ! -e "$file" ] ; then        
            fetch http://$ftphost$ftpdir/$file
        fi
    done

    if [ -z "$rel_exist" ] ; then
        zfs create -p $pool/iocage/releases/$release/root
    fi

    for file in `echo $ftpfiles` ; do
        if [ -e "$file" ] ; then
            echo "Exctracting: $file"
            tar -C /iocage/releases/$release/root -xf $file
        fi
    done

    if [ $release == "10.0-RELEASE" ] ; then
        __freebsd-update-fix
        cat /usr/local/sbin/ioc-freebsd-update \
        > /iocage/releases/$release/root/usr/sbin/freebsd-update

        echo "* Updating base.."
        /usr/local/sbin/ioc-freebsd-update -b /iocage/releases/$release/root fetch
        /usr/local/sbin/ioc-freebsd-update -b /iocage/releases/$release/root install
    fi

    if [ ! -d /iocage/log ] ; then 
        mkdir /iocage/log
    fi
}

# This creates jails----------------------------------------------------
__create_jail () {
    local installed=`zfs list -r $pool/iocage/releases|grep $release`

    if [ -z "$installed" ] ; then
        echo "Release $release not found locally, run fetch first"
        exit 1
    fi

    if [ "${2}" = "-c" ] ; then
        fs_list=`zfs list -rH -o name $pool/iocage/releases/$release`

        zfs snapshot -r $pool/iocage/releases/$release@$uuid
        for fs in $fs_list ; do
            cfs=`echo $fs | sed s#/releases/$release#/jails/$uuid#g`
            #echo "cloning $fs into $cfs"
            zfs clone $fs@$uuid $cfs
        done
    else
        zfs snapshot -r $pool/iocage/releases/$release@$uuid
        zfs send     -R $pool/iocage/releases/$release@$uuid | \
        zfs recv        $pool/iocage/jails/$uuid
        zfs destroy  -r $pool/iocage/releases/$release@$uuid
        zfs destroy  -r $pool/iocage/jails/$uuid@$uuid
    fi

    __configure_jail $pool/iocage/jails/$uuid

    touch /iocage/jails/$uuid/fstab
    touch /iocage/jails/${uuid}/root/etc/rc.conf

    echo "hostname=${uuid}" >> /iocage/jails/${uuid}/root/etc/rc.conf

    cronfix=`grep cron_flags /iocage/jails/${uuid}/root/etc/rc.conf | wc -l`

    if [ $cronfix -lt "1" ] ; then
        echo 'cron_flags="$cron_flags -J 15"' >> \
        /iocage/jails/${uuid}/root/etc/rc.conf
    fi
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local name="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }'`"
    local snapshot="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }'`"
    local dataset=`__find_jail $name`
    local fs_list=`zfs list -rH -o name $dataset`

    if [ -z "$snapshot" ] ; then
        zfs snapshot -r ${dataset}@${uuid}
        for fs in $fs_list ; do
            cfs=`echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g`
            zfs clone $fs@$uuid $cfs
        done
    else
        for fs in $fs_list ; do
            cfs=`echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g`
            zfs clone $fs@$snapshot $cfs
        done
    fi

    __configure_jail $pool/iocage/jails/$uuid
    mv /iocage/jails/$uuid/fstab /iocage/jails/$uuid/fstab.$name
    touch /iocage/jails/$uuid/fstab

    cat /iocage/jails/${uuid}/root/etc/rc.conf | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/$uuid/g" \
    > /iocage/jails/${uuid}/rc.conf

    mv /iocage/jails/${uuid}/rc.conf \
    /iocage/jails/${uuid}/root/etc/rc.conf
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local state=`jls|grep $name | wc -l`
    local dataset="`__find_jail $name`"

    if [ -z $dataset ] ; then
        echo "  ERROR: jail not found"
        exit 1
    fi

    local origin="`zfs get -H -o value origin $dataset`"

    echo " "
    echo "  WARNING: this will destroy jail $name"
    echo "  Dataset: $dataset"
    echo " "
    echo -n "  Are you sure ? Y[n]: "
    read answer

    if [ "$answer" == "Y" ] && [ "$state" -lt "1" ] ; then
        echo "  Destroying: $name"
        zfs destroy -fr $dataset

        if [ "$origin" != "-" ] ; then
            echo "  Destroying clone origin: $origin"
            zfs destroy -r $origin
        fi

    elif [ "$state" -eq "1" ] ; then
        echo "  ERROR: Jail is up and running ..exiting"
        exit 1
    fi
}

# Configure properties -------------------------------------------------
__configure_jail () {
    local CONF="$CONF_NET
                $CONF_JAIL
                $CONF_RCTL
                $CONF_CUSTOM
                $CONF_SYNC"

    echo "Configuring jail.."
    for prop in $CONF ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] ; then
            echo "** $prop_name=$prop"
            zfs set org.freebsd.iocage:$prop_name="$prop" $1
        fi
    done

    for prop in $CONF_ZFS ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] && [ "$prop" != "readonly" ] ; then
            zfs set $prop_name="$prop" $1
        fi
    done
}

# Export every property specified on command line ----------------------
__export_props () {
    for i in $@ ; do
        if [ `echo $i | grep -e ".*=.*"` ] ; then
            export $i
        fi
    done
}

# Set properties ------------------------------------------------------
__set_jail_prop () {
    local name=`__get_jail_name "$@"`
    local property="$2"
    local dataset=`__find_jail $name`
    local pname="`echo $property|cut -f 1 -d'='`"
    local pval="`echo $property|cut -f 2 -d'='`"
    local found="0"

    local CONF="$CONF_NET
                $CONF_JAIL
                $CONF_RCTL
                $CONF_CUSTOM
                $CONF_SYNC"

    for prop in $CONF ; do
        if [ "$prop" == "$pname" ] ; then
            found=1
            zfs set org.freebsd.iocage:${prop}="${pval}" $dataset
        fi
    done

    for prop in $CONF_ZFS ; do
        if [ "$prop" == "$pname" ] ; then
            zfs set $prop="$pval" $dataset
            found=1
        fi
    done

    if [ $found -ne "1" ] ; then
        echo "  ERROR: unsupported property: $pname !"
        exit 1
    fi
}

# Get properties -----------------------------------------------------
__get_jail_prop () {
    local name=`__get_jail_name "$@"`
    local property=$2
    local dataset=`__find_jail $name`
    local found="0"

    local CONF="$CONF_NET
                $CONF_JAIL
                $CONF_RCTL
                $CONF_CUSTOM
                $CONF_SYNC"

    for prop in $CONF ; do
        if [ $prop == $property ] ; then
            found=1
            local value=`zfs get -H -o value org.freebsd.iocage:$prop $dataset`
            echo "$value"
        elif [ $property == "all" ] ; then
            found=1
            local value=`zfs get -H -o value org.freebsd.iocage:$prop \
            $dataset`
            echo "$prop:$value"
        fi
    done

    for prop in $CONF_ZFS ; do
        if [ $prop == $property ] ; then
            found=1
            local value=`zfs get -H -o value $prop $dataset`
            echo "$value"
        fi
    done

    if [ $found -ne "1" ] ; then
        echo "  ERROR: unsupported property: $property !"
        exit 1
    fi
}

__usage () {
    echo "usage:"
    echo "  iocage fetch [release=RELEASE]"
    echo "  iocage create [-c | property=value]"
    echo "  iocage clone UUID | UUID@snapshot [property=value]"
    echo "  iocage destroy UUID"
    echo "  iocage list [-t]"
    echo "  iocage start UUID"
    echo "  iocage stop UUID"
    echo "  iocage restart UUID"
    echo "  iocage rcboot"
    echo "  iocage rcshutdown"
    echo "  iocage console UUID"
    echo "  iocage chroot UUID"
    echo "  iocage df"
    echo "  iocage get [property | all ] UUID"
    echo "  iocage set property=value UUID"
    echo "  iocage cap UUID"
    echo "  iocage limits [UUID]"
    echo "  iocage uncap UUID"
    echo "  iocage inuse UUID"
    echo "  iocage snapshot UUID | UUID@snapshotname"
    echo "  iocage snaplist UUID"
    echo "  iocage snapremove UUID@snapshotname"
    echo "  iocage rollback UUID@snapshotname"
    echo "  iocage promote UUID"
    echo "  iocage runtime UUID"
    echo "  iocage update UUID"
    echo "  iocage defaults"
    echo "  iocage version | --version"
    echo "  iocage help"
}

__get_jail_name () {
    for i in $@; do
        :;
    done

    echo $i
}

# Find and return the jail's top level ZFS dataset
__find_jail () {
    local jails=`zfs list -rH -o name $pool/iocage/jails \
                | grep -E "^$pool/iocage/jails/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}$"`

    for jail in $jails ; do
        if [ $1 == "ALL" ] ; then
            echo $jail
        elif [ `echo $jail |grep -E "^$pool/iocage/jails/${1}$"` ] ; then
            echo $jail
        fi
    done
}

__start_jail () {
    local name=`__get_jail_name "$@"`
    local tag="`__get_jail_prop get tag $name`"
    local jail_hostid="`__get_jail_prop get hostid $name`"
    local jail_path="`__get_jail_prop get mountpoint $name`"
    local dataset=`__find_jail $name`
    local template="`__get_jail_prop get template $name`"
    local cpuset="`__get_jail_prop get cpuset $name`"
    local procfs="`__get_jail_prop get mount_procfs $name`"
    local state=`jls | grep $name | wc -l`
    local nics=`__get_jail_prop get interfaces $name \
               |awk 'BEGIN { FS = "," } ; { print $1,$2,$3,$4 }'`

    if [ "$state" -eq "1" ] ; then
        echo "* ${name}: is already up"
        exit 1
    fi

    for i in $nics ; do
        local nic=`echo $i | awk 'BEGIN { FS = ":" } ; { print $1 }'`
        local bridge=`echo $i | awk 'BEGIN { FS = ":" } ; { print $2 }'`

        if [ -z $nic ] || [ -z $bridge ] ; then
            echo "  ERROR  : incorrect interfaces property format"
            echo "  HINT   : check with \"iocage get interfaces $name\""
            echo "  Example: vnet0:bridge0"
            exit 1
        fi
    done

    if [ $template == "yes" ] ; then
        return
    fi

    if [ "$jail_hostid" != "$hostid" ] ; then
        echo "ERROR: hostid mismatch, start failed!"
        echo "    jail hostid: $jail_hostid"
        echo "  host's hostid: $hostid"
        exit 1
    fi

    if [ "$procfs" == "1" ] ; then
        mount -t procfs proc /iocage/jails/${name}/root/proc
    fi

    echo "* Starting jail $name"
    echo "                (tag $tag)"

    jail -c vnet \
    name="ioc-`__get_jail_prop get host_hostuuid $name`" \
    host.hostname=`__get_jail_prop get hostname $name` \
    path="${jail_path}/root" \
    securelevel=`__get_jail_prop get securelevel $name` \
    host.hostuuid=`__get_jail_prop get host_hostuuid $name` \
    devfs_ruleset=`__get_jail_prop get devfs_ruleset $name` \
    enforce_statfs=`__get_jail_prop get enforce_statfs $name` \
    children.max=`__get_jail_prop get children_max $name` \
    allow.set_hostname=`__get_jail_prop get allow_set_hostname $name` \
    allow.sysvipc=`__get_jail_prop get allow_sysvipc $name` \
    allow.raw_sockets=`__get_jail_prop get allow_raw_sockets $name` \
    allow.chflags=`__get_jail_prop get allow_chflags $name` \
    allow.mount=`__get_jail_prop get allow_mount $name` \
    allow.mount.devfs=`__get_jail_prop get allow_mount_devfs $name` \
    allow.mount.nullfs=`__get_jail_prop get allow_mount_nullfs $name` \
    allow.mount.procfs=`__get_jail_prop get allow_mount_procfs $name` \
    allow.mount.tmpfs=`__get_jail_prop get allow_mount_tmpfs $name` \
    allow.mount.zfs=`__get_jail_prop get allow_mount_zfs $name` \
    allow.quotas=`__get_jail_prop get allow_quotas $name` \
    allow.socket_af=`__get_jail_prop get allow_socket_af $name` \
    exec.prestart="`__get_jail_prop get exec_prestart $name`" \
    exec.poststart="`__get_jail_prop get exec_poststart $name`" \
    exec.prestop="`__get_jail_prop get exec_prestop $name`" \
    exec.stop="`__get_jail_prop get exec_stop $name`" \
    exec.clean=`__get_jail_prop get exec_clean $name` \
    exec.timeout=`__get_jail_prop get exec_timeout $name` \
    stop.timeout=`__get_jail_prop get stop_timeout $name` \
    mount.fstab=/iocage/jails/$name/fstab \
    mount.devfs=`__get_jail_prop get mount_devfs $name ` \
    mount.fdescfs=`__get_jail_prop get mount_fdescfs $name` \
    allow.dying \
    exec.consolelog="/iocage/log/${name}-console.log" \
    persist

    cd ${jail_path}/root/dev && ln -s ../var/run/log log

    __networking start $name
    __rctl_limits $name

    if [ $cpuset != "off" ] ; then
        echo "  Appliyng CPU affinity.."
        local jid="`jls -j ioc-${name} jid`"
        cpuset -l $cpuset -j $jid
    fi

    jexec ioc-${name} `__get_jail_prop get exec_start $name` \
     >> /iocage/log/${name}-console.log 2>&1

    zfs set org.freebsd.iocage:last_started=`date "+%F_%T"` $dataset

}

__stop_jail () {
    local name="$1"
    local tag="`__get_jail_prop get tag $name`"
    local exec_prestop="`__get_jail_prop get exec_prestop $name`"
    local exec_stop="`__get_jail_prop get exec_stop $name`"
    local exec_poststop="`__get_jail_prop get exec_poststop $name`"
    local rlimits="`rctl | grep $name| wc -l`"
    local state=`jls | grep $name | wc -l`

    if [  "$state" -lt "1" ] ; then
        echo "* ${name}: is already down"
        exit 1
    fi

    echo "* Stopping jail $name"
    echo "                (tag $tag)"

    echo "$exec_prestop" | sh
    jexec ioc-${name} $exec_stop >> /iocage/log/${name}-console.log 2>&1
    __networking stop $name
    jail -r ioc-${name}
    echo "$exec_poststop" | sh

    umount -afvF /iocage/jails/${name}/fstab > /dev/null 2>&1
    umount /iocage/jails/${name}/root/dev/fd > /dev/null 2>&1
    umount /iocage/jails/${name}/root/dev    > /dev/null 2>&1
    umount /iocage/jails/${name}/root/proc   > /dev/null 2>&1

    if [ $rlimits -gt "0" ] ; then
        rctl -r jail:ioc-${name}
    fi
}

# Soft restart
__restart_jail () {
    local name="$1"
    local exec_stop="`__get_jail_prop get exec_stop $name`"
    local exec_start="`__get_jail_prop get exec_start $name`"
    local jid="`jls -j ioc-${name} jid`"
    local dataset=`__find_jail $name`

    echo "* Performing soft restart for jail: $1"
    jexec ioc-${name} $exec_stop >> /iocage/log/${name}-console.log 2>&1

    if [ $? -ne "1" ] ; then
        pkill -j $jid
        jexec ioc-${name} $exec_start >> /iocage/log/${name}-console.log 2>&1
        zfs set org.freebsd.iocage:last_started=`date "+%F_%T"` $dataset
    else
        echo "  ERROR: soft restart failed.."
        exit 1
    fi
}

__rc_jails () {
    local action=$1
    local jails=`__find_jail ALL`
    local boot_list="/tmp/iocage.$$"

    for jail in $jails ; do
        local name=`zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail`
        local boot=`zfs get -H -o value org.freebsd.iocage:boot $jail`
        local priority=`zfs get -H -o value org.freebsd.iocage:priority $jail`

        if [ "$boot" == "on" ] ; then
            echo "${priority},${name}" >> $boot_list
        fi
    done
    
    if [ -e $boot_list ] ; then
        local boot_order=`sort -n $boot_list`
        local shutdown_order=`sort -rn $boot_list`
    else
        echo "  ERROR: None of the jails have boot on"
        exit 1
    fi

    if [ "$action" == "boot" ] ; then

        for i in $boot_order ; do 
            local jail="`echo $i | cut -f2 -d,`"
            local state=`jls | grep $jail | wc -l`

            if [ "$state" -lt "1" ] ; then
                __start_jail $jail
            fi
        done

    elif [ "$action" == "shutdown" ] ; then

        for i in $shutdown_order ; do
            local jail="`echo $i | cut -f2 -d,`"
            local state=`jls | grep $jail | wc -l`

            if [ "$state" -eq "1" ] ; then
                __stop_jail $jail
            fi
        done

    fi

    rm $boot_list
}

__list_jails () {
    local jails=`__find_jail ALL`
    local switch=$2

    printf "%-36s  %s  %s  %s\n" "UUID" "BOOT"\
           "STATE" "TAG"
    for jail in $jails ; do
        uuid=`zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail`
        boot=`zfs get -H -o value org.freebsd.iocage:boot $jail`
        tag=`zfs get -H -o value org.freebsd.iocage:tag $jail`
        state=`jls | grep $uuid | awk '{print$1}'`
        template=`zfs get -H -o value org.freebsd.iocage:template $jail`

        if [ -z $state ] ; then
            state=down
        else
            state=up
        fi

        if [ -z ${switch} ] ; then
            switch=zero
        fi

        if [ $switch == "-t" ] ; then
            if [ $template == "yes" ] ; then
                printf "%-+.36s  %-3s   %-4s   %s\n" "$uuid" \
                "$boot" "$state" "$tag"
            fi
        elif [ $switch != "-t" ] ; then
            if [ $template != "yes" ] ; then
                printf "%-+.36s  %-3s   %-4s   %s\n" "$uuid" \
                "$boot" "$state" "$tag"
            fi
        fi
    done
}

__print_disk () {
    local jails=`__find_jail ALL`

    printf "%-36s  %-6s  %-5s  %-5s  %-5s  %-5s\n" "UUID" "CRT" "RES" "QTA" "USE" "AVA"

    for jail in $jails ; do
        uuid=`zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail`
        crt=`zfs get -H -o value compressratio $jail`
        res=`zfs get -H -o value reservation $jail`
        qta=`zfs get -H -o value quota $jail`
        use=`zfs get -H -o value used $jail`
        ava=`zfs get -H -o value available $jail`

        printf "%-36s  %-6s  %-5s  %-5s  %-5s  %-5s\n" "$uuid" "$crt" "$res" "$qta" \
               "$use" "$ava"
    done
}

__find_mypool () {
    pools=`zpool list -H -o name`

    for i in $pools ; do
        mypool=`zpool get comment $pool | grep -v NAME | awk '{print $3}'`
        if [ $mypool == "iocage" ] ; then
            export pool=$i
        else
            echo -n "  please select a pool for iocage jails [$i]: "
            read answer

            if [ -z "$answer" ] ; then
            answer=$i
            fi

            zpool set comment=iocage $answer
            exit 0
        fi
    done
}

__networking () {
    action=$1
    local name=$2
    local jid="`jls -j ioc-$name jid`"
    local nics=`__get_jail_prop get interfaces $name \
               |awk 'BEGIN { FS = "," } ; { print $1,$2,$3,$4 }'`

    if [ $action == "start" ] ; then
        for i in $nics ; do
            local nic=`echo $i | awk 'BEGIN { FS = ":" } ; { print $1 }'`
            local bridge=`echo $i | awk 'BEGIN { FS = ":" } ; { print $2 }'`
            epair_a=`ifconfig epair create`
            epair_b=`echo $epair_a | sed s/a\$/b/`
            ifconfig ${epair_a} name ${nic}:${jid}
            ifconfig ${nic}:${jid} description "associated with jail: $name"
            ifconfig $epair_b vnet ioc-${2}
            jexec ioc-${2} ifconfig $epair_b name $nic
            ifconfig $bridge addm ${nic}:${jid} up
            ifconfig ${nic}:${jid} up
        done
    elif [ $action == "stop" ] ; then
        for if in $nics ; do
            local nic=`echo $if | cut -f 1 -d:`
            ifconfig ${nic}:${jid} destroy
        done
    fi
}

__rctl_limits () {
    local name="$1"
    local rlimits="`__get_jail_prop get rlimits $name`"

    if [ $rlimits == "on" ] ; then
        echo "  Applying resource limits.."
        for prop in $CONF_RCTL ; do
            value="`__get_jail_prop get $prop $name`"
            limit=`echo $value | awk 'BEGIN { FS = ":" } ; { print $1 }'`
            action=`echo $value | awk 'BEGIN { FS = ":" } ; { print $2 }'`
            
            if [ $limit == "off" ] ; then
                continue
            else
                if [ -z "$limit" ] || [ -z "$action" ] ; then
                    echo -n "  ERROR: incorrect resource limit: $limit action: " 
                    echo "$action for property: $prop"
                    echo "  HINT : check man page for syntax."
                else
                    rctl -a jail:ioc-${name}:${prop}:${action}=${limit}
                fi
            fi

        done
    fi
}

__rctl_list () {
    local name="$1"

    if [ -z "$name" ] ; then
        echo "* All active limits:"
        rctl | grep jail
    else
        local jid="`jls -j ioc-${name} jid`"
        echo "* Active limits for jail: $name"
        rctl -h | grep $name
        if [ ! -z "$jid" ] ; then
            echo "* CPU affinity: `cpuset -g -j $jid | cut -f2 -d:`"
        fi
    fi
}

__rctl_uncap () {
    local name="$1"

    echo "  Releasing resource limits.."
    rctl -r jail:ioc-${name}
    echo "  Listing active rules for jail:"
    rctl | grep $name
}


__rctl_used () {
    local name="$1"

    echo "Consumed resources:"
    echo "-------------------"
    rctl -hu jail:ioc-${name}
}


__console () {
    local login_flags=`zfs get -H -o value org.freebsd.iocage:login_flags \
                       $pool/iocage/jails/$1`

    jexec ioc-${1} login $login_flags
}

__chroot () {
    local name="$1"

    chroot /iocage/jails/${name}/root
}


__snapshot () {
    local name="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }'`"
    local snapshot="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }'`"
    local dataset=`__find_jail $name`
    local date=`date "+%F_%T"`
   
    if [ ! -z $snapshot ] ; then
        zfs snapshot -r ${dataset}@${snapshot}
    else 
        zfs snapshot -r ${dataset}@ioc-${date}
    fi
}


__snapremove () {
    local name="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }'`"
    local snapshot="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }'`"
    local dataset=`__find_jail $name`

    if [ -z $dataset ] ; then
        echo "  ERROR: dataset not found"
        exit 1
    fi

    if [ ! -z $snapshot ] ; then
        echo "* removing snapshot: ${snapshot}"
        zfs destroy -r ${dataset}@${snapshot}
    else
        echo "  ERROR: snapshot not found"
        exit 1
    fi
}

__snaplist () {
    local dataset=`__find_jail $@`

    zfs list -Hrt snapshot -d1 $dataset \
    | awk '{print $1}' | cut -f 2 -d \@

}

__rollback () {
    local name="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }'`"
    local snapshot="`echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }'`"
    local dataset=`__find_jail $name`
    local fs_list=`zfs list -rH -o name $dataset`

    if [ ! -z "$snapshot" ] ; then
        for fs in $fs_list ; do
            echo "* Rolling back to ${fs}@${snapshot}"
            zfs rollback -r ${fs}@${snapshot}
        done
    fi
}


__promote () {
    local name="$1"
    local dataset=`__find_jail $name`
    local fs_list=`zfs list -rH -o name $dataset`

    if [ -z $dataset ] ; then
        echo "  ERROR: dataset not found"
        exit 1
    fi

    for fs in $fs_list ; do
        local origin="`zfs get -H -o value origin $fs`"

        if [ "$origin" != "-" ] ; then
            echo "* promoting filesystem: $fs"
            zfs promote $fs
            continue
        else
            echo "  INFO: filesystem $fs is not a clone"
        fi
    done
}

__runtime () {
    local name=$1
    local state="`jls -n -j ioc-${name} | wc -l`"

    if [ "$state" -eq "1" ] ; then
        local params="`jls -nj ioc-${name}`"
        for i in $params ; do
            echo "  $i"
        done
    else
        echo " ERROR: jail $name is not up.."
    fi

    exit
}

__update () {
    local name=$1
    local mountpoint="`__get_jail_prop get mountpoint $name`"
    local date=`date "+%F_%T"`

    __freebsd-update-fix

    cat /usr/local/sbin/ioc-freebsd-update \
    > ${mountpoint}/root/usr/sbin/freebsd-update

    echo "* creating back-out snapshot.."
    __snapshot ${name}@ioc-update_${date}

    echo "* Updating jail.."
    /usr/local/sbin/ioc-freebsd-update -b ${mountpoint}/root fetch
    /usr/local/sbin/ioc-freebsd-update -b ${mountpoint}/root install

    echo " "
    echo "* Once finished don't forget to remove the snapshot!"
}

# This is a required workaround to allow proper jail updates
__freebsd-update-fix () {
    cat /usr/sbin/freebsd-update | sed s/uname\ -r/freebsd-version/g \
    > /usr/local/sbin/ioc-freebsd-update

    chmod +x /usr/local/sbin/ioc-freebsd-update

}

__help () {
cat << EOT
NAME
  iocage - jail manager amalgamating ZFS, VNET and resource limits
SYNOPSIS
  iocage fetch
  iocage create [-c] [release=RELEASE]
  iocage clone UUID | UUID@snapshot [property=value]
  iocage destroy UUID
  iocage list [-t]
  iocage start UUID
  iocage stop UUID
  iocage restart UUID
  iocage rcboot
  iocage rcshutdown
  iocage console UUID
  iocage chroot UUID
  iocage df
  iocage get [property | all ] UUID
  iocage set property=value UUID
  iocage cap UUID
  iocage limits [UUID]
  iocage uncap UUID
  iocage inuse UUID
  iocage snapshot UUID | UUID@snapshotname
  iocage snaplist UUID
  iocage snapremove UUID@snapshotname
  iocage rollback UUID@snapshotname
  iocage promote UUID
  iocage runtime UUID
  iocage update UUID
  iocage defaults
  iocage version | --version
  iocage help
DESCRIPTION
  iocage is a system administration tool for jails designed to simplify
  jail management tasks. It abstracts away the management of ZFS backed jails running VNET
  networking with optional support for resource limits.
  
  NOTE: only VNET
  enabled jails are supported! The older shared IP based jails are
  intentionally not supported for various reasons - mostly VNET enabled jails
  provide better isolation.

  Each jail has a unique ID (UUID) automatically generated at creation time.
  Using UUID's as jail names means that a jail can be replicated in a
  distributed environment with greater flexibility. This also eliminates
  potential naming clashes on large scale deployments.

  To ease jail identification a TAG field is included in list mode which can
  be set to any string (hostname, label, note, etc.). By default the TAG field
  contains the creation date and time stamp.

  Properties are stored inside ZFS custom fields. This eliminates the need for
  any configuration files and jails can be easily moved with ZFS send and
  receive preserving all of their properties automatically.

  iocage relies on ZFS, VIMAGE (VNET) and has the following minimal
  requirements:
    o   FreeBSD 10.0-RELEASE amd64
    o   bridge interfaces (bridge0,bridge1) add:

        cloned_interfaces="bridge0 bridge1" to /etc/rc.conf
    o  Kernel compiled with:

        options         VIMAGE
        options         RACCT
        options         RCTL
SUBCOMMANDS
  fetch [release=RELEASE]

    fetch has to be executed as the first command on a pristine system. By
    default fetch will download the host node's RELEASE for deployment. If
    other releases are required this can be changed with supplying the
    required release property.

    Example: iocage fetch release=9.2-RELEASE

  create [-c] [release=RELEASE] [property=value] [property=value] ...

    By default create will deploy a new jail based on the host operating
    system's release. This can be changed by specifying the release option.
    If the -c switch is specified the jail will be cloned from the release.
    Default is to create a fully independent jail set.

    Example: iocage create tag=www01

  clone UUID | UUID@snapshot [property=value]

    Clone jail identified by UUID (ZFS clone). All properties will be reset on
    the clone, defaults can be overridden by specifying properties on the fly.
    Custom point-in-time snapshots can be used as a source for cloning in the
    form of UUID@snapshot.

    Examples:

    Clone the current state of the jail:
    iocage clone UUID tag=www02

    Clone a jail from a custom snapshot:
    iocage clone UUID@snapshotname tag=www02

  destroy UUID

    Destroy jail. This is irreversible, use with caution. If the jail is
    running destroy action will fail.

  list [-t]

    List all jails, if -t is specified list only templates.

  df

    List disk space related information. Available fields:
    
    CRT - compression ratio
    RES - reserved space
    QTA - disk quota
    USE - used space
    AVA - available space

  start UUID

    Start jail identified by UUID.

  stop UUID

    Stop jail identified by UUID.

  restart UUID

    Soft restart jail. Soft method will restart the jail without destroying
    the jail's networking and the jail itself. All processes are gracefully 
    restarted inside the jail. Useful for quick and graceful restarts.

  rcboot

    Start all jails with "boot" property set to "on". Intended for boot time
    execution. Jails will be started in an ordered fashion based on their
    "priority" property.

  rcshutdown

    Stop all jails with "boot" property set to "on". Intended for full host shutdown.
    Jails will be stopped in an ordered fashion based on their "priority"
    property.

  console UUID

    Console access, drop into jail.

  chroot UUID

    Chroot into jail, without actually starting the jail itself. Useful for
    initial setup (set root password, configure networking).

  get [property | all ] UUID

    Get named property or if all is specified dump all properties known to
    iocage.

    To display whether resource limits are enforced for jail:

    iocage get rlimits UUID

  set property=value UUID

    Set a property to value.

  cap UUID
    
    Reapply resource limits on jail while it is running.

  limits [UUID]

    Display active resource limits for a jail or all jails. With no UUID supplied
    display all limits active for all jail.

  uncap UUID

    Release all resource limits, disable limits on the fly.

  inuse UUID
    
    Display consumed resources for jail.

  snapshot UUID | UUID@snapshotname

    Create a ZFS snapshot for jail. If no snapshot name is specified defaults
    to auto snapshot name based on current date and time.

  snaplist UUID

    List all snapshots belonging to jail.

  snapremove UUID@snapshotname

    Destroy snapshot named snapshotname.

  rollback UUID@snapshotname

    Rollback to an existing snapshot named snapshotname. Any intermediate
    snapshots will be deleted as well. For more info on this please read
    zfs(8).

  promote UUID

    Promote a cloned jail to a fully independent copy. For more details please
    read zfs(8).

  runtime UUID

    Show runtime configuration of a jail. Useful for debugging.

  update UUID

    Update jail to latest patch level. A back-out snapshot is created to allow
    safe update/restore.

  defaults

    Display all defaults set in iocage itself.

  version | --version

    List version number.

  help

    List quick help.
PROPERTIES
  For more information on properties please check the relevant man page which
  is noted next to each property.

  interfaces
    
    By default there are two interfaces specified with their bridge
    association. Up to four interfaces are supported. Interface configurations
    are separated by commas.

    Default: vnet0:bridge0,vnet1:bridge1

  host_hostname

    Default: UUID. See jail(8) for more details.

  exec_fib

    Default: 0. jail(8)

  devfs_ruleset

    Default: 4. jail(8)

  mount_devfs

    Default: 1. jail(8)

  exec_start

    Default: /bin/sh /etc/rc. jail(8)

  exec_stop

    Default: /bin/sh /etc/rc.shutdown. jail(8)

  exec_prestart

    Default: /usr/bin/true. jail(8)

  exec_prestop

    Default: /usr/bin/true. jail(8)

  exec_poststop

    Default: /usr/bin/true. jail(8)

  exec_poststart

    Default: /usr/bin/true. jail(8)

  exec_clean

    Default: 1. jail(8)

  exec_timeout

    Default: 60. jail(8)

  stop_timeout

    Default: 30. jail(8)

  exec_jail_user

    Default: root. jail(8)

  exec_system_jail_user

    Default: 0. jail(8)

  exec_system_user

    Default: root. jail(8)

  mount_fdescfs

    Default: 1. jail(8)

  enforce_statfs

    Default: 2. jail(8)

  children_max

    Default: 0. jail(8)

  login_flags

    Default: -f root. jail(8)

  securelevel

    Default: 3. jail(8)

  allow_set_hostname

    Default: 1. jail(8)

  allow_sysvipc

    Default: 0. jail(8)

  allow_raw_sockets

    Default: 0. jail(8)

  allow_chflags

    Default: 0. jail(8)

  allow_mount

    Default: 0. jail(8)

  allow_mount_devfs

    Default: 0. jail(8)

  allow_mount_nullfs

    Default: 0. jail(8)

  allow_mount_procfs

    Default: 0. jail(8)

  allow_mount_tmpfs

    Default: 0. jail(8)

  allow_mount_zfs

    Default: 0. jail(8)

  allow_quotas

    Default: 0. jail(8)

  allow_socket_af

    Default: 0. jail(8)

  host_hostuuid

    Default: UUID. jail(8)

  tag

    Custom string for aliasing jails.

    Default: date@time

  template

    This property controls whether the jail is a template. Templates are not
    started by iocage. Set to yes if you intend to convert jail into template.
    (See EXAMPLES section)
    
    Default: no

  boot

    If set to on jail will be auto-started at boot time.

    Default: off

  notes

    Custom notes.

    Default: none

  owner

    The owner of the jail, can be any string.

    Default: root.

  priority

    Start priority at boot time, smaller value means higher priority.

    Default: 99.

  last_started

    Last successful start time.

  type

    Currently only jail is supported - this is for future use.

    Default: jail

  hostid

    The UUID of the host node. Jail won't start if this property differs from the actual UUID
    of the host node. This is to safeguard jails from being started on
    different nodes in case they are periodically replicated across nodes.

    Default: UUID od the host (/etc/hostid)

  release

    The RELEASE used at creation time.

  compression

    Default: lz4. zfs(8)

  origin

    This is only set for clones. zfs(8)

  quota

    Quota for jail.

    Default: 15G. zfs(8)

  mountpoint

    Path for the jail's root filesystem.

    Default: set to jail's root. zfs(8)

  compressratio

    Compression ratio. zfs(8)

  available

    Available space in jail's dataset. zfs(8)

  used

    Used space by jail. zfs(8)

  dedup

    Deduplication for jail.

    Default: off. zfs(8)

  reservation

    Reserved space for jail.

    Default: none. zfs(8)

  sync_target

    This is for future use, currently not supported.

  sync_tgt_zpool

    This is for future use, currently not supported.

  rlimits
    
    If on resource limits will be enforced.

    Default: off

  cpuset

    CPU affinity and limits. Please consult cpuset(1) for details.

    Default: off
RESOURCE LIMITS
  Resource limits (except cpuset and rlimits) use the following value 
  field formatting in the property:
  limit:action - to better understand what this means please read rctl(8)
  before enabling any limits.

  The following resource limits are supported:

  cpuset
    Default: off. cpuset(1) for more details.

  memoryuse

    Default: 8G:log. rctl(8)

  memorylocked

    Default: off. rctl(8)

  vmemoryuse

    Default: off. rctl(8)

  maxproc

    Default: off. rctl(8)

  cputime

    Default: off. rctl(8)

  pcpu

    Default: off. rctl(8)

  datasize

    Default: off. rctl(8)

  stacksize

    Default: off. rctl(8)

  coredumpsize

    Default: off. rctl(8)

  openfiles

    Default: off. rctl(8)

  pseudoterminals

    Default: off. rctl(8)

  swapuse

    Default: off. rctl(8)

  nthr

    Default: off. rctl(8)

  msgqqueued

    Default: off. rctl(8)

  msgqsize
    Default: off. rctl(8)

  nmsgq

    Default: off. rctl(8)

  nsemop

    Default: off. rctl(8)

  nshm

    Default: off. rctl(8)

  shmsize

    Default: off. rctl(8)

  wallclock

    Default: off. rctl(8)

EXAMPLES
  Set up iocage from scratch:

    iocage fetch

  Create first jail:

    iocage create tag=myjail

  List jails:

    iocage list

  Start jail:

    iocage start UUID

  Turn on resource limits and apply them:
  
    iocage set rlimits=on UUID
    iocage cap UUID

  Display resource usage:

    iocage inuse UUID

  Convert jail into template:

    iocage set template=yes UUID

  List templates:

    iocage list -t

  Clone jail from template:

    iocage clone UUID-of-template tag=myjail
HINTS
  iocage marks a ZFS pool in the pool's comment field and identifies the
  active pool for use based on this string.

  Don't forget to add the node's physical NIC into one of the bridges if you
  need outside connection. Also read bridge(4) how traffic is handled if you
  are not familiar with this concept (in a nutshell: bridge behaves like a
  network switch).

  PF firewall is not supported inside VNET jails as of July 2014. PF can be
  enabled for the host however. IPFW is fully supported.

  Property validation is not handled by iocage (to keep it simple) so please
  make sure your custom values are supported before configuring any
  properties.

  The actual jail name in the jls(8) output is set to ioc-UUID. This is a
  required workaround as jails will refuse to start with jail(8) when name
  starts with a "0".

  To prevent dmesg leak inside jails apply the following sysctl:

    security.bsd.unprivileged_read_msgbuf=0

  Consider applying these sysctl's as well:

    net.inet.ip.forwarding=1
    net.link.bridge.pfil_onlyip=0
    net.link.bridge.pfil_bridge=0
    net.link.bridge.pfil_member=0

  More info can be found here:

    https://github.com/pannon/iocage/wiki/Pre-flight-checklist
SEE ALSO
  jail(8), ifconfig(8), epair(4), bridge(4), jexec(8), zfs(8), zpool(8),
  rctl(8), cpuset(1), freebsd-update(8), sysctl(8)
BUGS
  Nothing is perfect, please kindly report them.
AUTHORS
  Peter Toth <peter.toth198@gmail.com>
EOT
}


if [ -z "$1" ] ; then
    __usage
    exit 0
fi

if [ "$1" == "help" ] ; then
    __help
    exit 0
fi


if [ "`whoami`" != "root" ] ; then
    echo "* Only root can manage jails!"
    exit 1
fi

__find_mypool
__parse_cmd "$@"
