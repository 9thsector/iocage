.\" Text automatically generated by txt2man
.TH iocage 8 "24 June 2014" "" ""
.SH NAME
\fBiocage \fP- jail manager amalgamating ZFS, VNET and resource limits
.SH SYNOPSIS
.nf
.fam C
\fBiocage\fP \fIfetch\fP
\fBiocage\fP \fIcreate\fP [\fB-c\fP] [\fIrelease=RELEASE\fP]
\fBiocage\fP \fIclone\fP \fIUUID\fP | \fIUUID@snapshot\fP [\fIproperty=value\fP]
\fBiocage\fP \fIdestroy\fP \fIUUID\fP
\fBiocage\fP \fIlist\fP [\fB-t\fP]
\fBiocage\fP \fIstart\fP \fIUUID\fP
\fBiocage\fP \fIstop\fP \fIUUID\fP
\fBiocage\fP \fIrestart\fP \fIUUID\fP
\fBiocage\fP \fIrcboot\fP
\fBiocage\fP \fIrcshutdown\fP
\fBiocage\fP \fIconsole\fP \fIUUID\fP
\fBiocage\fP \fIchroot\fP \fIUUID\fP
\fBiocage\fP \fIdf\fP
\fBiocage\fP \fIget\fP [\fIproperty\fP | \fIall\fP ] \fIUUID\fP
\fBiocage\fP \fIset\fP \fIproperty=value\fP \fIUUID\fP
\fBiocage\fP \fIcap\fP \fIUUID\fP
\fBiocage\fP \fIlimits\fP [\fIUUID\fP]
\fBiocage\fP \fIuncap\fP \fIUUID\fP
\fBiocage\fP \fIinuse\fP \fIUUID\fP
\fBiocage\fP \fIsnapshot\fP \fIUUID\fP | \fIUUID@snapshotname\fP
\fBiocage\fP \fIsnaplist\fP \fIUUID\fP
\fBiocage\fP \fIsnapremove\fP \fIUUID@snapshotname\fP
\fBiocage\fP \fIrollback\fP \fIUUID@snapshotname\fP
\fBiocage\fP \fIpromote\fP \fIUUID\fP
\fBiocage\fP \fIruntime\fP \fIUUID\fP
\fBiocage\fP \fIupdate\fP \fIUUID\fP
\fBiocage\fP \fIdefaults\fP
\fBiocage\fP \fIversion\fP | --\fIversion\fP
\fBiocage\fP \fIhelp\fP
.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBiocage\fP is a system administration tool for jails designed to simplify
jail management tasks. It abstracts away the management of ZFS backed jails running VNET
networking with optional support for resource \fIlimits\fP.
.PP
NOTE: only VNET
enabled jails are supported! The older shared IP based jails are
intentionally not supported for various reasons - mostly VNET enabled jails
provide better isolation.
.PP
Each jail has a unique ID (\fIUUID\fP) automatically generated at creation time.
Using \fIUUID\fP's as jail names means that a jail can be replicated in a
distributed environment with greater flexibility. This also eliminates
potential naming clashes on large scale deployments.
.PP
To ease jail identification a TAG field is included in \fIlist\fP mode which can
be \fIset\fP to any string (hostname, label, note, etc.). By default the TAG field
contains the creation date and time stamp.
.PP
Properties are stored inside ZFS custom fields. This eliminates the need for
any configuration files and jails can be easily moved with ZFS send and
receive preserving \fIall\fP of their properties automatically.
.PP
\fBiocage\fP relies on ZFS, VIMAGE (VNET) and has the following minimal
requirements:
.RS
.TP
.B
o
FreeBSD 10.0-RELEASE amd64
.TP
.B
o
bridge interfaces (bridge0,bridge1) add:
.PP
.nf
.fam C
        cloned_interfaces="bridge0 bridge1" to /etc/rc.conf
.fam T
.fi
.TP
.B
o
Kernel compiled with:
.PP
.nf
.fam C
        options         VIMAGE
        options         RACCT
        options         RCTL
.fam T
.fi
.SH SUBCOMMANDS
\fIfetch\fP [\fIrelease=RELEASE\fP]
.PP
.nf
.fam C
    fetch has to be executed as the first command on a pristine system. By
    default fetch will download the host node's RELEASE for deployment. If
    other releases are required this can be changed with supplying the
    required release property.

    Example: iocage fetch release=9.2-RELEASE

.fam T
.fi
\fIcreate\fP [\fB-c\fP] [\fIrelease=RELEASE\fP] [\fIproperty=value\fP] [\fIproperty=value\fP] \.\.\.
.PP
.nf
.fam C
    By default create will deploy a new jail based on the host operating
    system's release. This can be changed by specifying the release option.
    If the -c switch is specified the jail will be cloned from the release.
    Default is to create a fully independent jail set.

    Example: iocage create tag=www01

.fam T
.fi
\fIclone\fP \fIUUID\fP | \fIUUID@\fIsnapshot\fP\fP [\fIproperty=value\fP]
.PP
.nf
.fam C
    Clone jail identified by UUID (ZFS clone). All properties will be reset on
    the clone, defaults can be overridden by specifying properties on the fly.
    Custom point-in-time snapshots can be used as a source for cloning in the
    form of UUID@snapshot.

    Examples:

    Clone the current state of the jail:
    iocage clone UUID tag=www02

    Clone a jail from a custom snapshot:
    iocage clone UUID@snapshotname tag=www02

.fam T
.fi
\fIdestroy\fP \fIUUID\fP
.PP
.nf
.fam C
    Destroy jail. This is irreversible, use with caution. If the jail is
    running destroy action will fail.

.fam T
.fi
\fIlist\fP [\fB-t\fP]
.PP
.nf
.fam C
    List all jails, if -t is specified list only templates.

.fam T
.fi
\fIdf\fP
.PP
.nf
.fam C
    List disk space related information. Available fields:

    CRT - compression ratio
    RES - reserved space
    QTA - disk quota
    USE - used space
    AVA - available space

.fam T
.fi
\fIstart\fP \fIUUID\fP
.PP
.nf
.fam C
    Start jail identified by UUID.

.fam T
.fi
\fIstop\fP \fIUUID\fP
.PP
.nf
.fam C
    Stop jail identified by UUID.

.fam T
.fi
\fIrestart\fP \fIUUID\fP
.PP
.nf
.fam C
    Soft restart jail. Soft method will restart the jail without destroying
    the jail's networking and the jail itself. All processes are gracefully 
    restarted inside the jail. Useful for quick and graceful restarts.

.fam T
.fi
\fIrcboot\fP
.PP
.nf
.fam C
    Start all jails with "boot" property set to "on". Intended for boot time
    execution. Jails will be started in an ordered fashion based on their
    "priority" property.

.fam T
.fi
\fIrcshutdown\fP
.PP
.nf
.fam C
    Stop all jails with "boot" property set to "on". Intended for full host shutdown.
    Jails will be stopped in an ordered fashion based on their "priority"
    property.

.fam T
.fi
\fIconsole\fP \fIUUID\fP
.PP
.nf
.fam C
    Console access, drop into jail.

.fam T
.fi
\fIchroot\fP \fIUUID\fP
.PP
.nf
.fam C
    Chroot into jail, without actually starting the jail itself. Useful for
    initial setup (set root password, configure networking).

.fam T
.fi
\fIget\fP [\fIproperty\fP | \fIall\fP ] \fIUUID\fP
.PP
.nf
.fam C
    Get named property or if all is specified dump all properties known to
    iocage.

    To display whether resource limits are enforced for jail:

    iocage get rlimits UUID

.fam T
.fi
\fIset\fP \fIproperty=value\fP \fIUUID\fP
.PP
.nf
.fam C
    Set a property to value.

.fam T
.fi
\fIcap\fP \fIUUID\fP
.PP
.nf
.fam C
    Reapply resource limits on jail while it is running.

.fam T
.fi
\fIlimits\fP [\fIUUID\fP]
.PP
.nf
.fam C
    Display active resource limits for a jail or all jails. With no UUID supplied
    display all limits active for all jail.

.fam T
.fi
\fIuncap\fP \fIUUID\fP
.PP
.nf
.fam C
    Release all resource limits, disable limits on the fly.

.fam T
.fi
\fIinuse\fP \fIUUID\fP
.PP
.nf
.fam C
    Display consumed resources for jail.

.fam T
.fi
\fIsnapshot\fP \fIUUID\fP | \fIUUID@snapshotname\fP
.PP
.nf
.fam C
    Create a ZFS snapshot for jail. If no snapshot name is specified defaults
    to auto snapshot name based on current date and time.

.fam T
.fi
\fIsnaplist\fP \fIUUID\fP
.PP
.nf
.fam C
    List all snapshots belonging to jail.

.fam T
.fi
\fIsnapremove\fP \fIUUID@snapshotname\fP
.PP
.nf
.fam C
    Destroy snapshot named snapshotname.

.fam T
.fi
\fIrollback\fP \fIUUID@snapshotname\fP
.PP
.nf
.fam C
    Rollback to an existing snapshot named snapshotname. Any intermediate
    snapshots will be deleted as well. For more info on this please read
    zfs(8).

.fam T
.fi
\fIpromote\fP \fIUUID\fP
.PP
.nf
.fam C
    Promote a cloned jail to a fully independent copy. For more details please
    read zfs(8).

.fam T
.fi
\fIruntime\fP \fIUUID\fP
.PP
.nf
.fam C
    Show runtime configuration of a jail. Useful for debugging.

.fam T
.fi
\fIupdate\fP \fIUUID\fP
.PP
.nf
.fam C
    Update jail to latest patch level. A back-out snapshot is created to allow
    safe update/restore.

.fam T
.fi
\fIdefaults\fP
.PP
.nf
.fam C
    Display all defaults set in iocage itself.

.fam T
.fi
\fIversion\fP | --\fIversion\fP
.PP
.nf
.fam C
    List version number.

.fam T
.fi
\fIhelp\fP
.PP
.nf
.fam C
    List quick help.
.fam T
.fi
.SH PROPERTIES
For more information on properties please check the relevant man page which
is noted next to each \fIproperty\fP.
.PP
interfaces
.PP
.nf
.fam C
    By default there are two interfaces specified with their bridge
    association. Up to four interfaces are supported. Interface configurations
    are separated by commas.

    Default: vnet0:bridge0,vnet1:bridge1

.fam T
.fi
host_hostname
.PP
.nf
.fam C
    Default: UUID. See jail(8) for more details.

.fam T
.fi
exec_fib
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
devfs_ruleset
.PP
.nf
.fam C
    Default: 4. jail(8)

.fam T
.fi
mount_devfs
.PP
.nf
.fam C
    Default: 1. jail(8)

.fam T
.fi
exec_start
.PP
.nf
.fam C
    Default: /bin/sh /etc/rc. jail(8)

.fam T
.fi
exec_stop
.PP
.nf
.fam C
    Default: /bin/sh /etc/rc.shutdown. jail(8)

.fam T
.fi
exec_prestart
.PP
.nf
.fam C
    Default: /usr/bin/true. jail(8)

.fam T
.fi
exec_prestop
.PP
.nf
.fam C
    Default: /usr/bin/true. jail(8)

.fam T
.fi
exec_poststop
.PP
.nf
.fam C
    Default: /usr/bin/true. jail(8)

.fam T
.fi
exec_poststart
.PP
.nf
.fam C
    Default: /usr/bin/true. jail(8)

.fam T
.fi
exec_clean
.PP
.nf
.fam C
    Default: 1. jail(8)

.fam T
.fi
exec_timeout
.PP
.nf
.fam C
    Default: 60. jail(8)

.fam T
.fi
stop_timeout
.PP
.nf
.fam C
    Default: 30. jail(8)

.fam T
.fi
exec_jail_user
.PP
.nf
.fam C
    Default: root. jail(8)

.fam T
.fi
exec_system_jail_user
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
exec_system_user
.PP
.nf
.fam C
    Default: root. jail(8)

.fam T
.fi
mount_fdescfs
.PP
.nf
.fam C
    Default: 1. jail(8)

.fam T
.fi
enforce_statfs
.PP
.nf
.fam C
    Default: 2. jail(8)

.fam T
.fi
children_max
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
login_flags
.PP
.nf
.fam C
    Default: -f root. jail(8)

.fam T
.fi
securelevel
.PP
.nf
.fam C
    Default: 3. jail(8)

.fam T
.fi
allow_set_hostname
.PP
.nf
.fam C
    Default: 1. jail(8)

.fam T
.fi
allow_sysvipc
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_raw_sockets
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_chflags
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_mount
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_mount_devfs
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_mount_nullfs
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_mount_procfs
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_mount_tmpfs
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_mount_zfs
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_quotas
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
allow_socket_af
.PP
.nf
.fam C
    Default: 0. jail(8)

.fam T
.fi
host_hostuuid
.PP
.nf
.fam C
    Default: UUID. jail(8)

.fam T
.fi
tag
.PP
.nf
.fam C
    Custom string for aliasing jails.

    Default: date@time

.fam T
.fi
template
.PP
.nf
.fam C
    This property controls whether the jail is a template. Templates are not
    started by iocage. Set to yes if you intend to convert jail into template.
    (See EXAMPLES section)

    Default: no

.fam T
.fi
boot
.PP
.nf
.fam C
    If set to on jail will be auto-started at boot time.

    Default: off

.fam T
.fi
notes
.PP
.nf
.fam C
    Custom notes.

    Default: none

.fam T
.fi
owner
.PP
.nf
.fam C
    The owner of the jail, can be any string.

    Default: root.

.fam T
.fi
priority
.PP
.nf
.fam C
    Start priority at boot time, smaller value means higher priority.

    Default: 99.

.fam T
.fi
last_started
.PP
.nf
.fam C
    Last successful start time.

.fam T
.fi
type
.PP
.nf
.fam C
    Currently only jail is supported - this is for future use.

    Default: jail

.fam T
.fi
hostid
.PP
.nf
.fam C
    The UUID of the host node. Jail won't start if this property differs from the actual UUID
    of the host node. This is to safeguard jails from being started on
    different nodes in case they are periodically replicated across nodes.

    Default: UUID od the host (/etc/hostid)

.fam T
.fi
release
.PP
.nf
.fam C
    The RELEASE used at creation time.

.fam T
.fi
compression
.PP
.nf
.fam C
    Default: lz4. zfs(8)

.fam T
.fi
origin
.PP
.nf
.fam C
    This is only set for clones. zfs(8)

.fam T
.fi
quota
.PP
.nf
.fam C
    Quota for jail.

    Default: 15G. zfs(8)

.fam T
.fi
mountpoint
.PP
.nf
.fam C
    Path for the jail's root filesystem.

    Default: set to jail's root. zfs(8)

.fam T
.fi
compressratio
.PP
.nf
.fam C
    Compression ratio. zfs(8)

.fam T
.fi
available
.PP
.nf
.fam C
    Available space in jail's dataset. zfs(8)

.fam T
.fi
used
.PP
.nf
.fam C
    Used space by jail. zfs(8)

.fam T
.fi
dedup
.PP
.nf
.fam C
    Deduplication for jail.

    Default: off. zfs(8)

.fam T
.fi
reservation
.PP
.nf
.fam C
    Reserved space for jail.

    Default: none. zfs(8)

.fam T
.fi
sync_target
.PP
.nf
.fam C
    This is for future use, currently not supported.

.fam T
.fi
sync_tgt_zpool
.PP
.nf
.fam C
    This is for future use, currently not supported.

.fam T
.fi
rlimits
.PP
.nf
.fam C
    If on resource limits will be enforced.

    Default: off

.fam T
.fi
cpuset
.PP
.nf
.fam C
    CPU affinity and limits. Please consult cpuset(1) for details.

    Default: off
.fam T
.fi
.SH RESOURCE LIMITS
Resource \fIlimits\fP (except cpuset and rlimits) use the following value 
field formatting in the \fIproperty\fP:
limit:action - to better understand what this means please read \fBrctl\fP(8)
before enabling any \fIlimits\fP.
.PP
The following resource \fIlimits\fP are supported:
.PP
cpuset
Default: off. \fBcpuset\fP(1) for more details.
.PP
memoryuse
.PP
.nf
.fam C
    Default: 8G:log. rctl(8)

.fam T
.fi
memorylocked
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
vmemoryuse
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
maxproc
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
cputime
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
pcpu
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
datasize
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
stacksize
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
coredumpsize
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
openfiles
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
pseudoterminals
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
swapuse
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
nthr
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
msgqqueued
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
msgqsize
Default: off. \fBrctl\fP(8)
.PP
nmsgq
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
nsemop
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
nshm
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
shmsize
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
wallclock
.PP
.nf
.fam C
    Default: off. rctl(8)

.fam T
.fi
.SH EXAMPLES
Set up \fBiocage\fP from scratch:
.PP
.nf
.fam C
    iocage fetch

.fam T
.fi
Create first jail:
.PP
.nf
.fam C
    iocage create tag=myjail

.fam T
.fi
List jails:
.PP
.nf
.fam C
    iocage list

.fam T
.fi
Start jail:
.PP
.nf
.fam C
    iocage start UUID

.fam T
.fi
Turn on resource \fIlimits\fP and apply them:
.PP
.nf
.fam C
    iocage set rlimits=on UUID
    iocage cap UUID

.fam T
.fi
Display resource usage:
.PP
.nf
.fam C
    iocage inuse UUID

.fam T
.fi
Convert jail into template:
.PP
.nf
.fam C
    iocage set template=yes UUID

.fam T
.fi
List templates:
.PP
.nf
.fam C
    iocage list -t

.fam T
.fi
Clone jail from template:
.PP
.nf
.fam C
    iocage clone UUID-of-template tag=myjail
.fam T
.fi
.SH HINTS
\fBiocage\fP marks a ZFS pool in the pool's comment field and identifies the
active pool for use based on this string.
.PP
Don't forget to add the node's physical NIC into one of the bridges if you
need outside connection. Also read \fBbridge\fP(4) how traffic is handled if you
are not familiar with this concept (in a nutshell: bridge behaves like a
network switch).
.PP
PF firewall is not supported inside VNET jails as of July 2014. PF can be
enabled for the host however. IPFW is fully supported.
.PP
Property validation is not handled by \fBiocage\fP (to keep it simple) so please
make sure your custom values are supported before configuring any
properties.
.PP
The actual jail name in the \fBjls\fP(8) output is \fIset\fP to ioc-\fIUUID\fP. This is a
required workaround as jails will refuse to \fIstart\fP with \fBjail\fP(8) when name
starts with a "0".
.PP
To prevent dmesg leak inside jails apply the following sysctl:
.PP
.nf
.fam C
    security.bsd.unprivileged_read_msgbuf=0

.fam T
.fi
Consider applying these sysctl's as well:
.PP
.nf
.fam C
    net.inet.ip.forwarding=1
    net.link.bridge.pfil_onlyip=0
    net.link.bridge.pfil_bridge=0
    net.link.bridge.pfil_member=0

.fam T
.fi
More info can be found here:
.PP
.nf
.fam C
    https://github.com/pannon/iocage/wiki/Pre-flight-checklist
.fam T
.fi
.SH SEE ALSO
\fBjail\fP(8), \fBifconfig\fP(8), \fBepair\fP(4), \fBbridge\fP(4), \fBjexec\fP(8), \fBzfs\fP(8), \fBzpool\fP(8),
\fBrctl\fP(8), \fBcpuset\fP(1), \fBfreebsd-\fIupdate\fP\fP(8), \fBsysctl\fP(8)
.SH BUGS
Nothing is perfect, please kindly report them.
.SH AUTHORS
Peter Toth <peter.toth198@gmail.com>
