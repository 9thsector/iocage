{"name":"iocage","tagline":"FreeBSD jail manager","body":"iocage\r\n======\r\n\r\n**FreeBSD jail manager**\r\n\r\niocage is a drop in jail manager amalgamating ZFS, RCTL, VNET, and jails.\r\n\r\nStarting with version 1.3 both VNET and non-VNET jails are supported!\r\n\r\n- **[Read WIKI](https://github.com/pannon/iocage/wiki)**\r\n- **[Check FAQ](https://github.com/pannon/iocage/wiki/FAQ)**\r\n\r\n**FEATURES:**\r\n- rapid thin provisioning (within seconds!)\r\n- templating\r\n- ease of use (supports shortened UUIDs)\r\n- zero configuration files\r\n- virtual networking stacks (vnet)\r\n- shared IP based jails (non vnet)\r\n- fully writable clones\r\n- resource limits (CPU, MEMORY, etc.)\r\n- filesystem quotas and reservations\r\n- transparent snapshot management\r\n- binary updates\r\n- change recording with unionfs\r\n- and many more!\r\n\r\n**USAGE:**\r\n-  iocage fetch [release=RELEASE | ftphost=ftp.hostname.org] \r\n-  iocage create [-c|-e] [release=RELEASE] [property=value]\r\n-  iocage clone UUID | UUID@snapshot [property=value]\r\n-  iocage destroy UUID\r\n-  iocage list [-t]\r\n-  iocage start UUID\r\n-  iocage stop UUID\r\n-  iocage restart UUID\r\n-  iocage rcboot\r\n-  iocage rcshutdown\r\n-  iocage console UUID\r\n-  iocage chroot UUID\r\n-  iocage df\r\n-  iocage get [property | all ] UUID\r\n-  iocage set property=value UUID\r\n-  iocage cap UUID\r\n-  iocage limts [UUID]\r\n-  iocage uncap UUID\r\n-  iocage inuse UUID\r\n-  iocage snapshot UUID | UUID@snapshotname\r\n-  iocage snaplist UUID\r\n-  iocage snapremove UUID@snapshotname\r\n-  iocage rollback UUID@snapshotname\r\n-  iocage promote UUID\r\n-  iocage runtime UUID\r\n-  iocage update UUID\r\n-  iocage record start|stop UUID\r\n-  iocage package UUID\r\n-  iocage export UUID\r\n-  iocage import UUID [property=value]\r\n-  iocage defaults\r\n-  iocage version | --version\r\n-  iocage help\r\n\r\n**REQUIREMENTS**\r\n- FreeBSD 10.0-RELEASE amd64\r\n- Kernel compiled with:\r\n\r\n        # This is optional and only needed if you need VNET and resource\r\n        # limits\r\n\r\n        options         VIMAGE # VNET/Vimage support\r\n        options         RACCT  # Resource containers\r\n        options         RCTL   # same as above\r\n\r\n**OTHER CONSIDERATIONS**\r\n- for resource limiting please read rctl(8)\r\n- for the explanations on jail properties read jail(8)\r\n- create bridge0 and bridge1 interfaces \r\n\r\n**QUICK HOWTO**\r\n- 1. add bridge configuration to `/etc/rc.conf` on the host node\r\n   `cloned_interfaces=\"bridge0 bridge1\"`\r\n- 2. run `iocage fetch` - this will fetch the current release and prepare the\r\n   base jail environment. Optionally release can be overridden by issuing \r\n   `iocage fetch release=9.2-RELEASE` if you intend to run other releases.\r\n- 3. execute `iocage create` - this will set up a jail from scratch. If needed\r\n   The -c option will create a thin jail (ZFS clone) example: `iocage create -c`\r\n   the `tag=any_name` can be used to tag a jail at creation.\r\n- 4. issue `iocage list`\r\n- 5. start the jail with `iocage start uuid`\r\n- 6. drop into jail with `iocage console uuid`\r\n\r\n**OPTIONAL**\r\n- turn on resource caps with `iocage set rlimits=on uuid`\r\n- reload limits on-the-fly `iocage cap uuid`\r\n- list resource usage `iocage inuse uuid`\r\n- release limits `iocage uncap uuid`\r\n\r\n**HINTS**\r\n- Use iocage set/get to modify properties\r\n- To understand what most properties do read jail(8)\r\n- Consider adding the following to `/etc/sysctl.conf` on the host:\r\n\r\n        net.inet.ip.forwarding=1       # Enable IP forwarding between interfaces\r\n        net.link.bridge.pfil_onlyip=0  # Only pass IP packets when pfil is enabled\r\n        net.link.bridge.pfil_bridge=0  # Packet filter on the bridge interface\r\n        net.link.bridge.pfil_member=0  # Packet filter on the member interface\r\n","google":"UA-52404234-1","note":"Don't delete this file! It's used internally to help with page regeneration."}